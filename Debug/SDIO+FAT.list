
SDIO+FAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002ac48  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08032474  08032474  00042474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0803247c  0803247c  0004247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08032480  08032480  00042480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08032484  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00050094  2**0
                  CONTENTS
  8 .bss          00000684  20000094  20000094  00050094  2**2
                  ALLOC
  9 ._user_heap_stack 00001200  20000718  20000718  00050094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00050094  2**0
                  CONTENTS, READONLY
 11 .debug_info   000122f2  00000000  00000000  000500c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b42  00000000  00000000  000623b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000cc8  00000000  00000000  00064ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  00065bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006825  00000000  00000000  00066710  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003abd  00000000  00000000  0006cf35  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000709f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003338  00000000  00000000  00070a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007814 	.word	0x08007814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08007814 	.word	0x08007814

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f94b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f006 ff82 	bl	8007414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f963 	bl	8000806 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f92b 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	200000f0 	.word	0x200000f0

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000f0 	.word	0x200000f0

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3f7      	bcc.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <__NVIC_EnableIRQ+0x38>)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	095b      	lsrs	r3, r3, #5
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	f002 021f 	and.w	r2, r2, #31
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2b 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff40 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff33 	bl	8000664 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff feba 	bl	80005a4 <HAL_GetTick>
 8000830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	e099      	b.n	8000970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2202      	movs	r2, #2
 8000848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	f022 0201 	bic.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800085c:	e00f      	b.n	800087e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800085e:	f7ff fea1 	bl	80005a4 <HAL_GetTick>
 8000862:	4602      	mov	r2, r0
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	2b05      	cmp	r3, #5
 800086a:	d908      	bls.n	800087e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2220      	movs	r2, #32
 8000870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2203      	movs	r2, #3
 8000876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e078      	b.n	8000970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1e8      	bne.n	800085e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <HAL_DMA_Init+0x158>)
 8000898:	4013      	ands	r3, r2
 800089a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d107      	bne.n	80008e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e0:	4313      	orrs	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f023 0307 	bic.w	r3, r3, #7
 80008fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4313      	orrs	r3, r2
 8000908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	2b04      	cmp	r3, #4
 8000910:	d117      	bne.n	8000942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4313      	orrs	r3, r2
 800091a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00e      	beq.n	8000942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 fa0b 	bl	8000d40 <DMA_CheckFifoParam>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2240      	movs	r2, #64	; 0x40
 8000934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800093e:	2301      	movs	r3, #1
 8000940:	e016      	b.n	8000970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f9c2 	bl	8000cd4 <DMA_CalcBaseAndBitshift>
 8000950:	4603      	mov	r3, r0
 8000952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000958:	223f      	movs	r2, #63	; 0x3f
 800095a:	409a      	lsls	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	f010803f 	.word	0xf010803f

0800097c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d004      	beq.n	800099a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00c      	b.n	80009b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2205      	movs	r2, #5
 800099e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6812      	ldr	r2, [r2, #0]
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	f022 0201 	bic.w	r2, r2, #1
 80009b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009cc:	4b92      	ldr	r3, [pc, #584]	; (8000c18 <HAL_DMA_IRQHandler+0x258>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a92      	ldr	r2, [pc, #584]	; (8000c1c <HAL_DMA_IRQHandler+0x25c>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0a9b      	lsrs	r3, r3, #10
 80009d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ea:	2208      	movs	r2, #8
 80009ec:	409a      	lsls	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01a      	beq.n	8000a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d013      	beq.n	8000a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	f022 0204 	bic.w	r2, r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a18:	2208      	movs	r2, #8
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a24:	f043 0201 	orr.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a30:	2201      	movs	r2, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d012      	beq.n	8000a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d00b      	beq.n	8000a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4e:	2201      	movs	r2, #1
 8000a50:	409a      	lsls	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5a:	f043 0202 	orr.w	r2, r3, #2
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a66:	2204      	movs	r2, #4
 8000a68:	409a      	lsls	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d012      	beq.n	8000a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a84:	2204      	movs	r2, #4
 8000a86:	409a      	lsls	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a90:	f043 0204 	orr.w	r2, r3, #4
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d043      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d03c      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aba:	2210      	movs	r2, #16
 8000abc:	409a      	lsls	r2, r3
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d018      	beq.n	8000b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d108      	bne.n	8000af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d024      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	4798      	blx	r3
 8000aee:	e01f      	b.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01b      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	4798      	blx	r3
 8000b00:	e016      	b.n	8000b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d107      	bne.n	8000b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	6812      	ldr	r2, [r2, #0]
 8000b1a:	f022 0208 	bic.w	r2, r2, #8
 8000b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b34:	2220      	movs	r2, #32
 8000b36:	409a      	lsls	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 808e 	beq.w	8000c5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8086 	beq.w	8000c5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2220      	movs	r2, #32
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d136      	bne.n	8000bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	f022 0216 	bic.w	r2, r2, #22
 8000b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	6952      	ldr	r2, [r2, #20]
 8000b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_DMA_IRQHandler+0x1da>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	f022 0208 	bic.w	r2, r2, #8
 8000ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bae:	223f      	movs	r2, #63	; 0x3f
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d07d      	beq.n	8000cca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	4798      	blx	r3
        }
        return;
 8000bd6:	e078      	b.n	8000cca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d01c      	beq.n	8000c20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d108      	bne.n	8000c06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d030      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	4798      	blx	r3
 8000c04:	e02b      	b.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d027      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	4798      	blx	r3
 8000c16:	e022      	b.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	f022 0210 	bic.w	r2, r2, #16
 8000c3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d032      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d022      	beq.n	8000cb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2205      	movs	r2, #5
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6812      	ldr	r2, [r2, #0]
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	f022 0201 	bic.w	r2, r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d807      	bhi.n	8000ca6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f2      	bne.n	8000c8a <HAL_DMA_IRQHandler+0x2ca>
 8000ca4:	e000      	b.n	8000ca8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000ca6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	4798      	blx	r3
 8000cc8:	e000      	b.n	8000ccc <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cca:	bf00      	nop
    }
  }
}
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop

08000cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	3b10      	subs	r3, #16
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <DMA_CalcBaseAndBitshift+0x64>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <DMA_CalcBaseAndBitshift+0x68>)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d909      	bls.n	8000d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d0a:	f023 0303 	bic.w	r3, r3, #3
 8000d0e:	1d1a      	adds	r2, r3, #4
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	659a      	str	r2, [r3, #88]	; 0x58
 8000d14:	e007      	b.n	8000d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	aaaaaaab 	.word	0xaaaaaaab
 8000d3c:	08007880 	.word	0x08007880

08000d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d11f      	bne.n	8000d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d855      	bhi.n	8000e0c <DMA_CheckFifoParam+0xcc>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <DMA_CheckFifoParam+0x28>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000d8b 	.word	0x08000d8b
 8000d70:	08000d79 	.word	0x08000d79
 8000d74:	08000e0d 	.word	0x08000e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d045      	beq.n	8000e10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d88:	e042      	b.n	8000e10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d92:	d13f      	bne.n	8000e14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d98:	e03c      	b.n	8000e14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da2:	d121      	bne.n	8000de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d836      	bhi.n	8000e18 <DMA_CheckFifoParam+0xd8>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <DMA_CheckFifoParam+0x70>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dc7 	.word	0x08000dc7
 8000db8:	08000dc1 	.word	0x08000dc1
 8000dbc:	08000dd9 	.word	0x08000dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8000dc4:	e02f      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d024      	beq.n	8000e1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dd6:	e021      	b.n	8000e1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000de0:	d11e      	bne.n	8000e20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000de6:	e01b      	b.n	8000e20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d902      	bls.n	8000df4 <DMA_CheckFifoParam+0xb4>
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d003      	beq.n	8000dfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000df2:	e018      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
      break;
 8000df8:	e015      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00e      	beq.n	8000e24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
      break;
 8000e0a:	e00b      	b.n	8000e24 <DMA_CheckFifoParam+0xe4>
      break;
 8000e0c:	bf00      	nop
 8000e0e:	e00a      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;
 8000e10:	bf00      	nop
 8000e12:	e008      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;
 8000e14:	bf00      	nop
 8000e16:	e006      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;
 8000e18:	bf00      	nop
 8000e1a:	e004      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;
 8000e1c:	bf00      	nop
 8000e1e:	e002      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;   
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <DMA_CheckFifoParam+0xe6>
      break;
 8000e24:	bf00      	nop
    }
  } 
  
  return status; 
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e16b      	b.n	8001128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 815a 	bne.w	8001122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x4a>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	69b9      	ldr	r1, [r7, #24]
 8000ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0203 	and.w	r2, r3, #3
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d00b      	beq.n	8000f1a <HAL_GPIO_Init+0xe6>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0e:	2b11      	cmp	r3, #17
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d130      	bne.n	8000f7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68da      	ldr	r2, [r3, #12]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80b4 	beq.w	8001122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4a5f      	ldr	r2, [pc, #380]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fc0:	4b5e      	ldr	r3, [pc, #376]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <HAL_GPIO_Init+0x308>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_GPIO_Init+0x30c>)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	089b      	lsrs	r3, r3, #2
 8000fdc:	3302      	adds	r3, #2
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x310>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d02b      	beq.n	800105a <HAL_GPIO_Init+0x226>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a50      	ldr	r2, [pc, #320]	; (8001148 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d025      	beq.n	8001056 <HAL_GPIO_Init+0x222>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	; (800114c <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d01f      	beq.n	8001052 <HAL_GPIO_Init+0x21e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	; (8001150 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d019      	beq.n	800104e <HAL_GPIO_Init+0x21a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d013      	beq.n	800104a <HAL_GPIO_Init+0x216>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <HAL_GPIO_Init+0x324>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00d      	beq.n	8001046 <HAL_GPIO_Init+0x212>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	; (800115c <HAL_GPIO_Init+0x328>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d007      	beq.n	8001042 <HAL_GPIO_Init+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x32c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d101      	bne.n	800103e <HAL_GPIO_Init+0x20a>
 800103a:	2307      	movs	r3, #7
 800103c:	e00e      	b.n	800105c <HAL_GPIO_Init+0x228>
 800103e:	2308      	movs	r3, #8
 8001040:	e00c      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001042:	2306      	movs	r3, #6
 8001044:	e00a      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001046:	2305      	movs	r3, #5
 8001048:	e008      	b.n	800105c <HAL_GPIO_Init+0x228>
 800104a:	2304      	movs	r3, #4
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x228>
 800104e:	2303      	movs	r3, #3
 8001050:	e004      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001052:	2302      	movs	r3, #2
 8001054:	e002      	b.n	800105c <HAL_GPIO_Init+0x228>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x228>
 800105a:	2300      	movs	r3, #0
 800105c:	69fa      	ldr	r2, [r7, #28]
 800105e:	f002 0203 	and.w	r2, r2, #3
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4093      	lsls	r3, r2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800106c:	4934      	ldr	r1, [pc, #208]	; (8001140 <HAL_GPIO_Init+0x30c>)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <HAL_GPIO_Init+0x330>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c8:	4a26      	ldr	r2, [pc, #152]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f2:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x330>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800111c:	4a11      	ldr	r2, [pc, #68]	; (8001164 <HAL_GPIO_Init+0x330>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	f67f ae90 	bls.w	8000e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001130:	bf00      	nop
 8001132:	3724      	adds	r7, #36	; 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800
 8001140:	40013800 	.word	0x40013800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020400 	.word	0x40020400
 800114c:	40020800 	.word	0x40020800
 8001150:	40020c00 	.word	0x40020c00
 8001154:	40021000 	.word	0x40021000
 8001158:	40021400 	.word	0x40021400
 800115c:	40021800 	.word	0x40021800
 8001160:	40021c00 	.word	0x40021c00
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e22d      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d075      	beq.n	8001272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001186:	4ba3      	ldr	r3, [pc, #652]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d00c      	beq.n	80011ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001192:	4ba0      	ldr	r3, [pc, #640]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d112      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800119e:	4b9d      	ldr	r3, [pc, #628]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011aa:	d10b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4b99      	ldr	r3, [pc, #612]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d05b      	beq.n	8001270 <HAL_RCC_OscConfig+0x108>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d157      	bne.n	8001270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e208      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011cc:	d106      	bne.n	80011dc <HAL_RCC_OscConfig+0x74>
 80011ce:	4a91      	ldr	r2, [pc, #580]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	4b90      	ldr	r3, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e01d      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x98>
 80011e6:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	4b8a      	ldr	r3, [pc, #552]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4a88      	ldr	r2, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	4b87      	ldr	r3, [pc, #540]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xb0>
 8001200:	4a84      	ldr	r2, [pc, #528]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	4b84      	ldr	r3, [pc, #528]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4a81      	ldr	r2, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d013      	beq.n	8001248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff f9c0 	bl	80005a4 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff f9bc 	bl	80005a4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1cd      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0xc0>
 8001246:	e014      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff f9ac 	bl	80005a4 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff f9a8 	bl	80005a4 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b64      	cmp	r3, #100	; 0x64
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1b9      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0xe8>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d063      	beq.n	8001346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00b      	beq.n	80012a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128a:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d11c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d116      	bne.n	80012d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e18d      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4956      	ldr	r1, [pc, #344]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	e03a      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d8:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <HAL_RCC_OscConfig+0x2b0>)
 80012da:	2201      	movs	r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012de:	f7ff f961 	bl	80005a4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e6:	f7ff f95d 	bl	80005a4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e16e      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4943      	ldr	r1, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	4b43      	ldr	r3, [pc, #268]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
 8001318:	e015      	b.n	8001346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x2b0>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff f940 	bl	80005a4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001328:	f7ff f93c 	bl	80005a4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e14d      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d030      	beq.n	80013b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d016      	beq.n	8001388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x2b4>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001360:	f7ff f920 	bl	80005a4 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff f91c 	bl	80005a4 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e12d      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x200>
 8001386:	e015      	b.n	80013b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x2b4>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff f909 	bl	80005a4 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff f905 	bl	80005a4 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e116      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a0 	beq.w	8001502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d121      	bne.n	8001442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RCC_OscConfig+0x2b8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140a:	f7ff f8cb 	bl	80005a4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	e011      	b.n	8001436 <HAL_RCC_OscConfig+0x2ce>
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	42470000 	.word	0x42470000
 800141c:	42470e80 	.word	0x42470e80
 8001420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff f8be 	bl	80005a4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0cf      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001436:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <HAL_RCC_OscConfig+0x478>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d106      	bne.n	8001458 <HAL_RCC_OscConfig+0x2f0>
 800144a:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x32a>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x312>
 8001460:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001462:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800146e:	4b5d      	ldr	r3, [pc, #372]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x32a>
 800147a:	4a5a      	ldr	r2, [pc, #360]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff f883 	bl	80005a4 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff f87f 	bl	80005a4 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e08e      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x33a>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff f86d 	bl	80005a4 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff f869 	bl	80005a4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e078      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	4b3f      	ldr	r3, [pc, #252]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	4a3b      	ldr	r2, [pc, #236]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d064      	beq.n	80015d4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b08      	cmp	r3, #8
 8001514:	d05c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d141      	bne.n	80015a2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_RCC_OscConfig+0x480>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff f83e 	bl	80005a4 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff f83a 	bl	80005a4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04b      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800154a:	4926      	ldr	r1, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	019b      	lsls	r3, r3, #6
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	085b      	lsrs	r3, r3, #1
 8001564:	3b01      	subs	r3, #1
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <HAL_RCC_OscConfig+0x480>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff f813 	bl	80005a4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001582:	f7ff f80f 	bl	80005a4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e020      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x41a>
 80015a0:	e018      	b.n	80015d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_OscConfig+0x480>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7fe fffc 	bl	80005a4 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7fe fff8 	bl	80005a4 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e009      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_RCC_OscConfig+0x47c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x448>
 80015ce:	e001      	b.n	80015d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40007000 	.word	0x40007000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470060 	.word	0x42470060

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0ca      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 020f 	and.w	r2, r3, #15
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 020f 	and.w	r2, r3, #15
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b6      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	4b58      	ldr	r3, [pc, #352]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	494f      	ldr	r1, [pc, #316]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07d      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06d      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e065      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4936      	ldr	r1, [pc, #216]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 0203 	bic.w	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7fe ff62 	bl	80005a4 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7fe ff5e 	bl	80005a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04d      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 020f 	and.w	r2, r3, #15
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90c      	bls.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_RCC_ClockConfig+0x1b4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 020f 	and.w	r2, r3, #15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e030      	b.n	8001796 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4918      	ldr	r1, [pc, #96]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4911      	ldr	r1, [pc, #68]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f81d 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 8001776:	4601      	mov	r1, r0
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	fa21 f303 	lsr.w	r3, r1, r3
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800178e:	2000      	movs	r0, #0
 8001790:	f7fe fec4 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08032464 	.word	0x08032464
 80017ac:	2000002c 	.word	0x2000002c

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b4:	b08f      	sub	sp, #60	; 0x3c
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	; 0x34
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c8:	4b62      	ldr	r3, [pc, #392]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3a>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 80b2 	bne.w	8001942 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017de:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80017e2:	e0b1      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017e8:	e0ae      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d04e      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	ea01 0103 	and.w	r1, r1, r3
 8001816:	ea02 0204 	and.w	r2, r2, r4
 800181a:	460b      	mov	r3, r1
 800181c:	4614      	mov	r4, r2
 800181e:	0160      	lsls	r0, r4, #5
 8001820:	6278      	str	r0, [r7, #36]	; 0x24
 8001822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001824:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001828:	6278      	str	r0, [r7, #36]	; 0x24
 800182a:	015b      	lsls	r3, r3, #5
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	eb64 0402 	sbc.w	r4, r4, r2
 8001838:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800183c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001840:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001844:	ebb8 0803 	subs.w	r8, r8, r3
 8001848:	eb69 0904 	sbc.w	r9, r9, r4
 800184c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001864:	eb18 0801 	adds.w	r8, r8, r1
 8001868:	eb49 0902 	adc.w	r9, r9, r2
 800186c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001884:	4640      	mov	r0, r8
 8001886:	4649      	mov	r1, r9
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	f04f 0400 	mov.w	r4, #0
 800188e:	461a      	mov	r2, r3
 8001890:	4623      	mov	r3, r4
 8001892:	f7fe fc99 	bl	80001c8 <__aeabi_uldivmod>
 8001896:	4603      	mov	r3, r0
 8001898:	460c      	mov	r4, r1
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
 800189c:	e043      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	f04f 0400 	mov.w	r4, #0
 80018a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	ea01 0103 	and.w	r1, r1, r3
 80018b4:	ea02 0204 	and.w	r2, r2, r4
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	0160      	lsls	r0, r4, #5
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	015b      	lsls	r3, r3, #5
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018d0:	1a5b      	subs	r3, r3, r1
 80018d2:	eb64 0402 	sbc.w	r4, r4, r2
 80018d6:	01a6      	lsls	r6, r4, #6
 80018d8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80018dc:	019d      	lsls	r5, r3, #6
 80018de:	1aed      	subs	r5, r5, r3
 80018e0:	eb66 0604 	sbc.w	r6, r6, r4
 80018e4:	00f3      	lsls	r3, r6, #3
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	00eb      	lsls	r3, r5, #3
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80018f8:	186d      	adds	r5, r5, r1
 80018fa:	eb46 0602 	adc.w	r6, r6, r2
 80018fe:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001902:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001906:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800190a:	4655      	mov	r5, sl
 800190c:	465e      	mov	r6, fp
 800190e:	4628      	mov	r0, r5
 8001910:	4631      	mov	r1, r6
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	f7fe fc54 	bl	80001c8 <__aeabi_uldivmod>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0c1b      	lsrs	r3, r3, #16
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	3301      	adds	r3, #1
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001940:	e002      	b.n	8001948 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001946:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800194a:	4618      	mov	r0, r3
 800194c:	373c      	adds	r7, #60	; 0x3c
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	00f42400 	.word	0x00f42400
 800195c:	007a1200 	.word	0x007a1200

08001960 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e01d      	b.n	80019ae <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f005 fc55 	bl	8007234 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f810 	bl	80019b8 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af04      	add	r7, sp, #16
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80019d8:	2376      	movs	r3, #118	; 0x76
 80019da:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681d      	ldr	r5, [r3, #0]
 80019e0:	466c      	mov	r4, sp
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f4:	4628      	mov	r0, r5
 80019f6:	f001 fb6a 	bl	80030ce <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_SD_InitCard+0xb4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 fbab 	bl	8003160 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_SD_InitCard+0xb4>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f7fe fdd3 	bl	80005bc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f8d7 	bl	8002bca <SD_PowerON>
 8001a1c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e013      	b.n	8001a64 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fffb 	bl	8002a38 <SD_InitCard>
 8001a42:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6c:	422580a0 	.word	0x422580a0

08001a70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b08f      	sub	sp, #60	; 0x3c
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7fe fd8f 	bl	80005a4 <HAL_GetTick>
 8001a86:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e177      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	f040 816a 	bne.w	8001d88 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	441a      	add	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d907      	bls.n	8001ad8 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001acc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e15e      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2203      	movs	r2, #3
 8001adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d002      	beq.n	8001af6 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	025b      	lsls	r3, r3, #9
 8001af4:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fbc2 	bl	8003288 <SDMMC_CmdBlockLength>
 8001b04:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e133      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001b3a:	2390      	movs	r3, #144	; 0x90
 8001b3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f107 0210 	add.w	r2, r7, #16
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fb6b 	bl	8003230 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d90a      	bls.n	8001b76 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2202      	movs	r2, #2
 8001b64:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 fbd3 	bl	8003318 <SDMMC_CmdReadMultiBlock>
 8001b72:	6378      	str	r0, [r7, #52]	; 0x34
 8001b74:	e009      	b.n	8001b8a <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fba4 	bl	80032d0 <SDMMC_CmdReadSingleBlock>
 8001b88:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d04a      	beq.n	8001c26 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0f1      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d016      	beq.n	8001bee <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc4:	e00d      	b.n	8001be2 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bcc:	18d4      	adds	r4, r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 faa6 	bl	8003124 <SDIO_ReadFIFO>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	3301      	adds	r3, #1
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d9ee      	bls.n	8001bc6 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8001be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bea:	3320      	adds	r3, #32
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_SD_ReadBlocks+0x194>
 8001bf4:	f7fe fcd6 	bl	80005a4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d310      	bcc.n	8001c26 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e0b7      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2c:	f240 332a 	movw	r3, #810	; 0x32a
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0bd      	beq.n	8001bb2 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x216>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d91d      	bls.n	8001c86 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d019      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 fbca 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8001c5c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e087      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	f043 0208 	orr.w	r2, r3, #8
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06f      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e057      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d037      	beq.n	8001d64 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e03f      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fa02 	bl	8003124 <SDIO_ReadFIFO>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8001d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d28:	3304      	adds	r3, #4
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_SD_ReadBlocks+0x2d2>
 8001d32:	f7fe fc37 	bl	80005a4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d310      	bcc.n	8001d64 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e018      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1d1      	bne.n	8001d16 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e006      	b.n	8001d96 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	373c      	adds	r7, #60	; 0x3c
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}

08001d9e <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b08e      	sub	sp, #56	; 0x38
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7fe fbf8 	bl	80005a4 <HAL_GetTick>
 8001db4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e148      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f040 813b 	bne.w	8002058 <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	441a      	add	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d907      	bls.n	8001e06 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e12f      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d002      	beq.n	8001e24 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fa2b 	bl	8003288 <SDMMC_CmdBlockLength>
 8001e32:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e104      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d90a      	bls.n	8001e78 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fa9a 	bl	80033a8 <SDMMC_CmdWriteMultiBlock>
 8001e74:	6378      	str	r0, [r7, #52]	; 0x34
 8001e76:	e009      	b.n	8001e8c <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fa6b 	bl	8003360 <SDMMC_CmdWriteSingleBlock>
 8001e8a:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d8      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	025b      	lsls	r3, r3, #9
 8001ebe:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001ec0:	2390      	movs	r3, #144	; 0x90
 8001ec2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 f9a8 	bl	8003230 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001ee0:	e037      	b.n	8001f52 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d014      	beq.n	8001f1a <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef4:	e00b      	b.n	8001f0e <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f00:	4413      	add	r3, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f001 f91b 	bl	800313e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	2b07      	cmp	r3, #7
 8001f12:	d9f0      	bls.n	8001ef6 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	3320      	adds	r3, #32
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_SD_WriteBlocks+0x192>
 8001f20:	f7fe fb40 	bl	80005a4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	1ad2      	subs	r2, r2, r3
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d310      	bcc.n	8001f52 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e089      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f58:	f240 331a 	movw	r3, #794	; 0x31a
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0bf      	beq.n	8001ee2 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_SD_WriteBlocks+0x214>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d91d      	bls.n	8001fb2 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d019      	beq.n	8001fb2 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fa34 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8001f88:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e059      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e041      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e029      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e011      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800204a:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	e006      	b.n	8002066 <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3738      	adds	r7, #56	; 0x38
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 808d 	beq.w	80021a6 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80020a4:	f023 0302 	bic.w	r3, r3, #2
 80020a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03a      	beq.n	800212c <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_SD_IRQHandler+0x5e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d011      	beq.n	80020f2 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f98c 	bl	80033f0 <SDMMC_CmdStopTransfer>
 80020d8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f925 	bl	800233c <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80020fa:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_SD_IRQHandler+0xac>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f004 fdff 	bl	8006d20 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8002122:	e103      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f004 fdf1 	bl	8006d0c <HAL_SD_TxCpltCallback>
}
 800212a:	e0ff      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80f9 	beq.w	800232c <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f001 f950 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8002150:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8e9 	bl	800233c <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 80da 	bne.w	800232c <HAL_SD_IRQHandler+0x2bc>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 80d3 	bne.w	800232c <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f004 fdb4 	bl	8006d0c <HAL_SD_TxCpltCallback>
}
 80021a4:	e0c2      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 ff5f 	bl	8003082 <SD_Write_IT>
}
 80021c4:	e0b2      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 ff27 	bl	8003032 <SD_Read_IT>
}
 80021e4:	e0a2      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ec:	f240 233a 	movw	r3, #570	; 0x23a
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 809a 	beq.w	800232c <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	f043 0208 	orr.w	r2, r3, #8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	f043 0220 	orr.w	r2, r3, #32
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	f043 0210 	orr.w	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	f043 0208 	orr.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002292:	f023 0302 	bic.w	r3, r3, #2
 8002296:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d036      	beq.n	8002312 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d011      	beq.n	80022d0 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_SD_IRQHandler+0x2c4>)
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fb5f 	bl	800097c <HAL_DMA_Abort_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d033      	beq.n	800232c <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fb39 	bl	8002940 <SD_DMATxAbort>
}
 80022ce:	e02d      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d011      	beq.n	80022fc <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_SD_IRQHandler+0x2c8>)
 80022de:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fb49 	bl	800097c <HAL_DMA_Abort_IT>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01d      	beq.n	800232c <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fb61 	bl	80029bc <SD_DMARxAbort>
}
 80022fa:	e017      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f004 fcf4 	bl	8006cf8 <HAL_SD_AbortCallback>
}
 8002310:	e00c      	b.n	800232c <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f808 	bl	800233c <HAL_SD_ErrorCallback>
}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	08002941 	.word	0x08002941
 8002338:	080029bd 	.word	0x080029bd

0800233c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002350:	b490      	push	{r4, r7}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002362:	0e1b      	lsrs	r3, r3, #24
 8002364:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	b2da      	uxtb	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b2db      	uxtb	r3, r3
 800239c:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	0e1b      	lsrs	r3, r3, #24
 80023ce:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	88db      	ldrh	r3, [r3, #6]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	b2da      	uxtb	r2, r3
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b2db      	uxtb	r3, r3
 8002416:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	09db      	lsrs	r3, r3, #7
 800241c:	b2db      	uxtb	r3, r3
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	099b      	lsrs	r3, r3, #6
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	b2da      	uxtb	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8086 	bne.w	8002574 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002478:	b2db      	uxtb	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	431a      	orrs	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800248e:	0e1b      	lsrs	r3, r3, #24
 8002490:	b2db      	uxtb	r3, r3
 8002492:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	431a      	orrs	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0306 	and.w	r3, r3, #6
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	7e1b      	ldrb	r3, [r3, #24]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	09db      	lsrs	r3, r3, #7
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b2da      	uxtb	r2, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	7e1b      	ldrb	r3, [r3, #24]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	3302      	adds	r3, #2
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	fb02 f203 	mul.w	r2, r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	7a1b      	ldrb	r3, [r3, #8]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	2301      	movs	r3, #1
 8002550:	fa03 f202 	lsl.w	r2, r3, r2
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002560:	0a52      	lsrs	r2, r2, #9
 8002562:	fb02 f203 	mul.w	r2, r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002570:	661a      	str	r2, [r3, #96]	; 0x60
 8002572:	e051      	b.n	8002618 <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	2b01      	cmp	r3, #1
 800257a:	d13c      	bne.n	80025f6 <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002580:	b2db      	uxtb	r3, r3
 8002582:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002594:	0e1b      	lsrs	r3, r3, #24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ac:	0c1b      	lsrs	r3, r3, #16
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f04f 0400 	mov.w	r4, #0
 80025d0:	3301      	adds	r3, #1
 80025d2:	f144 0400 	adc.w	r4, r4, #0
 80025d6:	029a      	lsls	r2, r3, #10
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	659a      	str	r2, [r3, #88]	; 0x58
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60
 80025f4:	e010      	b.n	8002618 <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0c1      	b.n	800279c <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002634:	b2da      	uxtb	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800263e:	b2db      	uxtb	r3, r3
 8002640:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	7e9b      	ldrb	r3, [r3, #26]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	09db      	lsrs	r3, r3, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002664:	b2da      	uxtb	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	0e1b      	lsrs	r3, r3, #24
 8002670:	b2db      	uxtb	r3, r3
 8002672:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	09db      	lsrs	r3, r3, #7
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	b2da      	uxtb	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	0c1b      	lsrs	r3, r3, #16
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7fdb      	ldrb	r3, [r3, #31]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b2db      	uxtb	r3, r3
 800270c:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	09db      	lsrs	r3, r3, #7
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	b2da      	uxtb	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	091b      	lsrs	r3, r3, #4
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	b2da      	uxtb	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	b2da      	uxtb	r2, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	b2db      	uxtb	r3, r3
 800277e:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278a:	b2da      	uxtb	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc90      	pop	{r4, r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80027fe:	b5b0      	push	{r4, r5, r7, lr}
 8002800:	b08e      	sub	sp, #56	; 0x38
 8002802:	af04      	add	r7, sp, #16
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	2b03      	cmp	r3, #3
 800281a:	d02e      	beq.n	800287a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d106      	bne.n	8002832 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
 8002830:	e029      	b.n	8002886 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	d10a      	bne.n	8002850 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa97 	bl	8002d6e <SD_WideBus_Enable>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
 800284e:	e01a      	b.n	8002886 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10a      	bne.n	800286c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fad6 	bl	8002e08 <SD_WideBus_Disable>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
 800286a:	e00c      	b.n	8002886 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
 8002878:	e005      	b.n	8002886 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e024      	b.n	80028ee <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681d      	ldr	r5, [r3, #0]
 80028ca:	466c      	mov	r4, sp
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	4628      	mov	r0, r5
 80028e0:	f000 fbf5 	bl	80030ce <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}

080028f6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80028fe:	2304      	movs	r3, #4
 8002900:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fa02 	bl	8002d1a <SD_SendStatus>
 8002916:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0a5b      	lsrs	r3, r3, #9
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002936:	7dfb      	ldrb	r3, [r7, #23]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d127      	bne.n	80029b4 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ffc6 	bl	80028f6 <HAL_SD_GetCardState>
 800296a:	4603      	mov	r3, r0
 800296c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800297c:	7afb      	ldrb	r3, [r7, #11]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d002      	beq.n	8002988 <SD_DMATxAbort+0x48>
 8002982:	7afb      	ldrb	r3, [r7, #11]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d115      	bne.n	80029b4 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fd2f 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f004 f9a6 	bl	8006cf8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80029ac:	e002      	b.n	80029b4 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff fcc4 	bl	800233c <HAL_SD_ErrorCallback>
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d127      	bne.n	8002a30 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7ff ff88 	bl	80028f6 <HAL_SD_GetCardState>
 80029e6:	4603      	mov	r3, r0
 80029e8:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d002      	beq.n	8002a04 <SD_DMARxAbort+0x48>
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d115      	bne.n	8002a30 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fcf1 	bl	80033f0 <SDMMC_CmdStopTransfer>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f004 f968 	bl	8006cf8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8002a28:	e002      	b.n	8002a30 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f7ff fc86 	bl	800233c <HAL_SD_ErrorCallback>
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b094      	sub	sp, #80	; 0x50
 8002a3c:	af04      	add	r7, sp, #16
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002a44:	2301      	movs	r3, #1
 8002a46:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fb95 	bl	800317c <SDIO_GetPowerState>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a5c:	e0b1      	b.n	8002bc2 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d02f      	beq.n	8002ac6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fdda 	bl	8003624 <SDMMC_CmdSendCID>
 8002a70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <SD_InitCard+0x44>
    {
      return errorstate;
 8002a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7a:	e0a2      	b.n	8002bc2 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fbbf 	bl	8003206 <SDIO_GetResponse>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2104      	movs	r1, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fbb6 	bl	8003206 <SDIO_GetResponse>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fbad 	bl	8003206 <SDIO_GetResponse>
 8002aac:	4602      	mov	r2, r0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	210c      	movs	r1, #12
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fba4 	bl	8003206 <SDIO_GetResponse>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d00d      	beq.n	8002aea <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f107 020e 	add.w	r2, r7, #14
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fde4 	bl	80036a6 <SDMMC_CmdSetRelAdd>
 8002ade:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SD_InitCard+0xb2>
    {
      return errorstate;
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	e06b      	b.n	8002bc2 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d036      	beq.n	8002b60 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	461a      	mov	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fdac 	bl	8003664 <SDMMC_CmdSendCSD>
 8002b0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b16:	e054      	b.n	8002bc2 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fb71 	bl	8003206 <SDIO_GetResponse>
 8002b24:	4602      	mov	r2, r0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2104      	movs	r1, #4
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fb68 	bl	8003206 <SDIO_GetResponse>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2108      	movs	r1, #8
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fb5f 	bl	8003206 <SDIO_GetResponse>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	210c      	movs	r1, #12
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 fb56 	bl	8003206 <SDIO_GetResponse>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2104      	movs	r1, #4
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fb4d 	bl	8003206 <SDIO_GetResponse>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	0d1a      	lsrs	r2, r3, #20
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fbe8 	bl	8002350 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	f04f 0400 	mov.w	r4, #0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	4608      	mov	r0, r1
 8002b94:	f000 fc50 	bl	8003438 <SDMMC_CmdSelDesel>
 8002b98:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <SD_InitCard+0x16c>
  {
    return errorstate;
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba2:	e00e      	b.n	8002bc2 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681d      	ldr	r5, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	466c      	mov	r4, sp
 8002bac:	f103 0210 	add.w	r2, r3, #16
 8002bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 fa87 	bl	80030ce <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3740      	adds	r7, #64	; 0x40
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bdb0      	pop	{r4, r5, r7, pc}

08002bca <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fc4b 	bl	8003482 <SDMMC_CmdGoIdleState>
 8002bec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SD_PowerON+0x2e>
  {
    return errorstate;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	e08c      	b.n	8002d12 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fc60 	bl	80034c2 <SDMMC_CmdOperCond>
 8002c02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03d      	beq.n	8002c86 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c10:	e032      	b.n	8002c78 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	60ba      	str	r2, [r7, #8]
 8002c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c24:	e075      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fc69 	bl	8003504 <SDMMC_CmdAppCommand>
 8002c32:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c3e:	e068      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fc80 	bl	800354c <SDMMC_CmdAppOperCommand>
 8002c4c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c58:	e05b      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fad0 	bl	8003206 <SDIO_GetResponse>
 8002c66:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	0fdb      	lsrs	r3, r3, #31
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <SD_PowerON+0xaa>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <SD_PowerON+0xac>
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0c9      	beq.n	8002c12 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44
 8002c84:	e044      	b.n	8002d10 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002c8c:	e031      	b.n	8002cf2 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	60ba      	str	r2, [r7, #8]
 8002c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d102      	bne.n	8002ca2 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca0:	e037      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fc2b 	bl	8003504 <SDMMC_CmdAppCommand>
 8002cae:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <SD_PowerON+0xf0>
      {
        return errorstate;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	e02b      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fc42 	bl	800354c <SDMMC_CmdAppOperCommand>
 8002cc8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <SD_PowerON+0x10a>
      {
        return errorstate;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	e01e      	b.n	8002d12 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa93 	bl	8003206 <SDIO_GetResponse>
 8002ce0:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	0fdb      	lsrs	r3, r3, #31
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <SD_PowerON+0x124>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <SD_PowerON+0x126>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ca      	beq.n	8002c8e <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
 8002d08:	e002      	b.n	8002d10 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002d2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d32:	e018      	b.n	8002d66 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 fcd3 	bl	80036ec <SDMMC_CmdSendStatus>
 8002d46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	e009      	b.n	8002d66 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fa54 	bl	8003206 <SDIO_GetResponse>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fa3c 	bl	8003206 <SDIO_GetResponse>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d98:	d102      	bne.n	8002da0 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d9e:	e02f      	b.n	8002e00 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f87b 	bl	8002ea2 <SD_FindSCR>
 8002dac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	e023      	b.n	8002e00 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01c      	beq.n	8002dfc <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fb98 	bl	8003504 <SDMMC_CmdAppCommand>
 8002dd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	e00f      	b.n	8002e00 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fbd5 	bl	8003596 <SDMMC_CmdBusWidth>
 8002dec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	e003      	b.n	8002e00 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e001      	b.n	8002e00 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f9ef 	bl	8003206 <SDIO_GetResponse>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e32:	d102      	bne.n	8002e3a <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e38:	e02f      	b.n	8002e9a <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f82e 	bl	8002ea2 <SD_FindSCR>
 8002e46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	e023      	b.n	8002e9a <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fb4b 	bl	8003504 <SDMMC_CmdAppCommand>
 8002e6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	e00f      	b.n	8002e9a <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fb88 	bl	8003596 <SDMMC_CmdBusWidth>
 8002e86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	e003      	b.n	8002e9a <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e001      	b.n	8002e9a <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002ea2:	b590      	push	{r4, r7, lr}
 8002ea4:	b08f      	sub	sp, #60	; 0x3c
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002eac:	2300      	movs	r3, #0
 8002eae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7fd fb78 	bl	80005a4 <HAL_GetTick>
 8002eb4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f9dd 	bl	8003288 <SDMMC_CmdBlockLength>
 8002ece:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_FindSCR+0x38>
  {
    return errorstate;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	e0a7      	b.n	800302a <SD_FindSCR+0x188>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 fb0c 	bl	8003504 <SDMMC_CmdAppCommand>
 8002eec:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <SD_FindSCR+0x56>
  {
    return errorstate;
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	e098      	b.n	800302a <SD_FindSCR+0x188>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8002efe:	2308      	movs	r3, #8
 8002f00:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002f02:	2330      	movs	r3, #48	; 0x30
 8002f04:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f107 0214 	add.w	r2, r7, #20
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 f987 	bl	8003230 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb59 	bl	80035de <SDMMC_CmdSendSCR>
 8002f2c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d022      	beq.n	8002f7a <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	e078      	b.n	800302a <SD_FindSCR+0x188>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f107 020c 	add.w	r2, r7, #12
 8002f4e:	18d4      	adds	r4, r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 f8e5 	bl	8003124 <SDIO_ReadFIFO>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6023      	str	r3, [r4, #0]
      index++;
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f60:	3301      	adds	r3, #1
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002f64:	f7fd fb1e 	bl	80005a4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f72:	d102      	bne.n	8002f7a <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002f74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f78:	e057      	b.n	800302a <SD_FindSCR+0x188>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	f240 432a 	movw	r3, #1066	; 0x42a
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0d6      	beq.n	8002f38 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	e042      	b.n	800302a <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e035      	b.n	800302a <SD_FindSCR+0x188>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	e028      	b.n	800302a <SD_FindSCR+0x188>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	0611      	lsls	r1, r2, #24
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	0212      	lsls	r2, r2, #8
 8002fee:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8002ff2:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	0a12      	lsrs	r2, r2, #8
 8002ff8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002ffc:	4311      	orrs	r1, r2
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	0e12      	lsrs	r2, r2, #24
 8003002:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003004:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003012:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800301c:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	0e1b      	lsrs	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	373c      	adds	r7, #60	; 0x3c
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}

08003032 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003032:	b590      	push	{r4, r7, lr}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	e00d      	b.n	8003066 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	18d4      	adds	r4, r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f864 	bl	8003124 <SDIO_ReadFIFO>
 800305c:	4603      	mov	r3, r0
 800305e:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b07      	cmp	r3, #7
 800306a:	d9ee      	bls.n	800304a <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f103 0220 	add.w	r2, r3, #32
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}

08003082 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e00b      	b.n	80030b2 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f000 f849 	bl	800313e <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d9f0      	bls.n	800309a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f103 0220 	add.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80030ce:	b084      	sub	sp, #16
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	f107 001c 	add.w	r0, r7, #28
 80030dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80030e4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80030e6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80030e8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80030ec:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80030f0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80030f4:	431a      	orrs	r2, r3
             Init.ClockDiv
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80030f8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003108:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	b004      	add	sp, #16
 8003122:	4770      	bx	lr

08003124 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0303 	and.w	r3, r3, #3
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80031bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80031c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80031d2:	f023 030f 	bic.w	r3, r3, #15
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3314      	adds	r3, #20
 8003218:	461a      	mov	r2, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4413      	add	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
}  
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003256:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800325c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003262:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800327a:	2300      	movs	r3, #0

}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800329a:	2310      	movs	r3, #16
 800329c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032aa:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff70 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	2110      	movs	r1, #16
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa62 	bl	8003788 <SDMMC_GetCmdResp1>
 80032c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032c6:	69fb      	ldr	r3, [r7, #28]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80032e2:	2311      	movs	r3, #17
 80032e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032e6:	2340      	movs	r3, #64	; 0x40
 80032e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff4c 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	2111      	movs	r1, #17
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa3e 	bl	8003788 <SDMMC_GetCmdResp1>
 800330c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800330e:	69fb      	ldr	r3, [r7, #28]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800332a:	2312      	movs	r3, #18
 800332c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800332e:	2340      	movs	r3, #64	; 0x40
 8003330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800333a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff28 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	2112      	movs	r1, #18
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa1a 	bl	8003788 <SDMMC_GetCmdResp1>
 8003354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003356:	69fb      	ldr	r3, [r7, #28]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003372:	2318      	movs	r3, #24
 8003374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800337e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003382:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff04 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	2118      	movs	r1, #24
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9f6 	bl	8003788 <SDMMC_GetCmdResp1>
 800339c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800339e:	69fb      	ldr	r3, [r7, #28]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80033ba:	2319      	movs	r3, #25
 80033bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033be:	2340      	movs	r3, #64	; 0x40
 80033c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fee0 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	2119      	movs	r1, #25
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f9d2 	bl	8003788 <SDMMC_GetCmdResp1>
 80033e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033e6:	69fb      	ldr	r3, [r7, #28]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003400:	230c      	movs	r3, #12
 8003402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003404:	2340      	movs	r3, #64	; 0x40
 8003406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800340c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003410:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff febd 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <SDMMC_CmdStopTransfer+0x44>)
 8003420:	210c      	movs	r1, #12
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f9b0 	bl	8003788 <SDMMC_GetCmdResp1>
 8003428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800342a:	69fb      	ldr	r3, [r7, #28]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	05f5e100 	.word	0x05f5e100

08003438 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800344c:	2307      	movs	r3, #7
 800344e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003450:	2340      	movs	r3, #64	; 0x40
 8003452:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	4619      	mov	r1, r3
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fe97 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	2107      	movs	r1, #7
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f989 	bl	8003788 <SDMMC_GetCmdResp1>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800347a:	4618      	mov	r0, r3
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b088      	sub	sp, #32
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800349e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe74 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f93f 	bl	8003734 <SDMMC_GetCmdError>
 80034b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034b8:	69fb      	ldr	r3, [r7, #28]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b088      	sub	sp, #32
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80034ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80034d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80034d4:	2308      	movs	r3, #8
 80034d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fe53 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fb10 	bl	8003b18 <SDMMC_GetCmdResp7>
 80034f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034fa:	69fb      	ldr	r3, [r7, #28]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003516:	2337      	movs	r3, #55	; 0x37
 8003518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003526:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003528:	f107 0308 	add.w	r3, r7, #8
 800352c:	4619      	mov	r1, r3
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff fe32 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	2137      	movs	r1, #55	; 0x37
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f924 	bl	8003788 <SDMMC_GetCmdResp1>
 8003540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003542:	69fb      	ldr	r3, [r7, #28]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003564:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003566:	2329      	movs	r3, #41	; 0x29
 8003568:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800356a:	2340      	movs	r3, #64	; 0x40
 800356c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003576:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003578:	f107 0308 	add.w	r3, r7, #8
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fe0a 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa25 	bl	80039d4 <SDMMC_GetCmdResp3>
 800358a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800358c:	69fb      	ldr	r3, [r7, #28]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80035a8:	2306      	movs	r3, #6
 80035aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fde9 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	2106      	movs	r1, #6
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f8db 	bl	8003788 <SDMMC_GetCmdResp1>
 80035d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035d4:	69fb      	ldr	r3, [r7, #28]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b088      	sub	sp, #32
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80035ee:	2333      	movs	r3, #51	; 0x33
 80035f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035f2:	2340      	movs	r3, #64	; 0x40
 80035f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fdc6 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	2133      	movs	r1, #51	; 0x33
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8b8 	bl	8003788 <SDMMC_GetCmdResp1>
 8003618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800361a:	69fb      	ldr	r3, [r7, #28]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003634:	2302      	movs	r3, #2
 8003636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003638:	23c0      	movs	r3, #192	; 0xc0
 800363a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003644:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fda3 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f97e 	bl	8003954 <SDMMC_GetCmdResp2>
 8003658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800365a:	69fb      	ldr	r3, [r7, #28]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003676:	2309      	movs	r3, #9
 8003678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800367a:	23c0      	movs	r3, #192	; 0xc0
 800367c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003686:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003688:	f107 0308 	add.w	r3, r7, #8
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fd82 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f95d 	bl	8003954 <SDMMC_GetCmdResp2>
 800369a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800369c:	69fb      	ldr	r3, [r7, #28]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b088      	sub	sp, #32
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80036b8:	2303      	movs	r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036bc:	2340      	movs	r3, #64	; 0x40
 80036be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036ca:	f107 0308 	add.w	r3, r7, #8
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fd61 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	2103      	movs	r1, #3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f9ae 	bl	8003a3c <SDMMC_GetCmdResp6>
 80036e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036e2:	69fb      	ldr	r3, [r7, #28]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80036fe:	230d      	movs	r3, #13
 8003700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800370a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800370e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	4619      	mov	r1, r3
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff fd3e 	bl	8003198 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800371c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003720:	210d      	movs	r1, #13
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f830 	bl	8003788 <SDMMC_GetCmdResp1>
 8003728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800372a:	69fb      	ldr	r3, [r7, #28]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003734:	b490      	push	{r4, r7}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <SDMMC_GetCmdError+0x4c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a10      	ldr	r2, [pc, #64]	; (8003784 <SDMMC_GetCmdError+0x50>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0a5b      	lsrs	r3, r3, #9
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003750:	4623      	mov	r3, r4
 8003752:	1e5c      	subs	r4, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800375c:	e00a      	b.n	8003774 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f2      	beq.n	8003750 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bc90      	pop	{r4, r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000002c 	.word	0x2000002c
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	460b      	mov	r3, r1
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003796:	4b6c      	ldr	r3, [pc, #432]	; (8003948 <SDMMC_GetCmdResp1+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	; (800394c <SDMMC_GetCmdResp1+0x1c4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	0a5b      	lsrs	r3, r3, #9
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80037a8:	4623      	mov	r3, r4
 80037aa:	1e5c      	subs	r4, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80037b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80037b4:	e0c3      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f2      	beq.n	80037a8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2204      	movs	r2, #4
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80037d4:	2304      	movs	r3, #4
 80037d6:	e0b2      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0a7      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fcfc 	bl	80031ec <SDIO_GetCommandResponse>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d001      	beq.n	8003802 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09d      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003808:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800380a:	2100      	movs	r1, #0
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fcfa 	bl	8003206 <SDIO_GetResponse>
 8003812:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4b4e      	ldr	r3, [pc, #312]	; (8003950 <SDMMC_GetCmdResp1+0x1c8>)
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800381e:	2300      	movs	r3, #0
 8003820:	e08d      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da02      	bge.n	800382e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382c:	e087      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003838:	2340      	movs	r3, #64	; 0x40
 800383a:	e080      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	e079      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003858:	e071      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003868:	e069      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003878:	e061      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003888:	e059      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	e051      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80038a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a8:	e049      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80038b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038b8:	e041      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80038c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c8:	e039      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80038d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d8:	e031      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80038e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038e8:	e029      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80038f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038f8:	e021      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003908:	e019      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003914:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003918:	e011      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003924:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003928:	e009      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003934:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003938:	e001      	b.n	800393e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800393a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	2000002c 	.word	0x2000002c
 800394c:	10624dd3 	.word	0x10624dd3
 8003950:	fdffe008 	.word	0xfdffe008

08003954 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003954:	b490      	push	{r4, r7}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800395c:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <SDMMC_GetCmdResp2+0x78>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <SDMMC_GetCmdResp2+0x7c>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003970:	4623      	mov	r3, r4
 8003972:	1e5c      	subs	r4, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003978:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800397c:	e020      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f2      	beq.n	8003970 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800399c:	2304      	movs	r3, #4
 800399e:	e00f      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e004      	b.n	80039c0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc90      	pop	{r4, r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	2000002c 	.word	0x2000002c
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80039dc:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <SDMMC_GetCmdResp3+0x60>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <SDMMC_GetCmdResp3+0x64>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80039f0:	4623      	mov	r3, r4
 80039f2:	1e5c      	subs	r4, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80039f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80039fc:	e015      	b.n	8003a2a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f2      	beq.n	80039f0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2204      	movs	r2, #4
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e004      	b.n	8003a2a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc90      	pop	{r4, r7}
 8003a32:	4770      	bx	lr
 8003a34:	2000002c 	.word	0x2000002c
 8003a38:	10624dd3 	.word	0x10624dd3

08003a3c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	460b      	mov	r3, r1
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a4a:	4b31      	ldr	r3, [pc, #196]	; (8003b10 <SDMMC_GetCmdResp6+0xd4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a31      	ldr	r2, [pc, #196]	; (8003b14 <SDMMC_GetCmdResp6+0xd8>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0a5b      	lsrs	r3, r3, #9
 8003a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003a5e:	4623      	mov	r3, r4
 8003a60:	1e5c      	subs	r4, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003a66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a6a:	e04c      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a70:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f2      	beq.n	8003a5e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d004      	beq.n	8003a8e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e03b      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e030      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fba1 	bl	80031ec <SDIO_GetCommandResponse>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d001      	beq.n	8003ab8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e026      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fb9f 	bl	8003206 <SDIO_GetResponse>
 8003ac8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e011      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003af0:	e009      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	e001      	b.n	8003b06 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2000002c 	.word	0x2000002c
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003b18:	b490      	push	{r4, r7}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <SDMMC_GetCmdResp7+0x6c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <SDMMC_GetCmdResp7+0x70>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0a5b      	lsrs	r3, r3, #9
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003b34:	4623      	mov	r3, r4
 8003b36:	1e5c      	subs	r4, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b40:	e01a      	b.n	8003b78 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f2      	beq.n	8003b34 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b60:	2304      	movs	r3, #4
 8003b62:	e009      	b.n	8003b78 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b76:	2300      	movs	r3, #0
  
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc90      	pop	{r4, r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	2000002c 	.word	0x2000002c
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <disk_status+0x30>)
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	79fa      	ldrb	r2, [r7, #7]
 8003ba4:	4905      	ldr	r1, [pc, #20]	; (8003bbc <disk_status+0x30>)
 8003ba6:	440a      	add	r2, r1
 8003ba8:	7a12      	ldrb	r2, [r2, #8]
 8003baa:	4610      	mov	r0, r2
 8003bac:	4798      	blx	r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	200000d8 	.word	0x200000d8

08003bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	; (8003c08 <disk_initialize+0x48>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d111      	bne.n	8003bfc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <disk_initialize+0x48>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <disk_initialize+0x48>)
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	79fa      	ldrb	r2, [r7, #7]
 8003bee:	4906      	ldr	r1, [pc, #24]	; (8003c08 <disk_initialize+0x48>)
 8003bf0:	440a      	add	r2, r1
 8003bf2:	7a12      	ldrb	r2, [r2, #8]
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4798      	blx	r3
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200000d8 	.word	0x200000d8

08003c0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <disk_read+0x3c>)
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	689c      	ldr	r4, [r3, #8]
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <disk_read+0x3c>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	7a18      	ldrb	r0, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	47a0      	blx	r4
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200000d8 	.word	0x200000d8

08003c4c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <disk_write+0x3c>)
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68dc      	ldr	r4, [r3, #12]
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <disk_write+0x3c>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	7a18      	ldrb	r0, [r3, #8]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	68b9      	ldr	r1, [r7, #8]
 8003c76:	47a0      	blx	r4
 8003c78:	4603      	mov	r3, r0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200000d8 	.word	0x200000d8

08003c8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	603a      	str	r2, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <disk_ioctl+0x38>)
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	79fa      	ldrb	r2, [r7, #7]
 8003caa:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <disk_ioctl+0x38>)
 8003cac:	440a      	add	r2, r1
 8003cae:	7a10      	ldrb	r0, [r2, #8]
 8003cb0:	79b9      	ldrb	r1, [r7, #6]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4798      	blx	r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  return res;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200000d8 	.word	0x200000d8

08003cc8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	b21b      	sxth	r3, r3
 8003ce8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003cea:	89fb      	ldrh	r3, [r7, #14]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3303      	adds	r3, #3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	3202      	adds	r2, #2
 8003d10:	7812      	ldrb	r2, [r2, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	3201      	adds	r2, #1
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	7812      	ldrb	r2, [r2, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	460b      	mov	r3, r1
 8003d48:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	0a1b      	lsrs	r3, r3, #8
 8003da0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	617a      	str	r2, [r7, #20]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	1c51      	adds	r1, r2, #1
 8003df0:	6139      	str	r1, [r7, #16]
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f1      	bne.n	8003de6 <mem_cpy+0x1a>
	}
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003e0e:	b480      	push	{r7}
 8003e10:	b087      	sub	sp, #28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	617a      	str	r2, [r7, #20]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f3      	bne.n	8003e1e <mem_set+0x10>
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003e42:	b480      	push	{r7}
 8003e44:	b089      	sub	sp, #36	; 0x24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	61fa      	str	r2, [r7, #28]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	61ba      	str	r2, [r7, #24]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	1acb      	subs	r3, r1, r3
 8003e6e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <mem_cmp+0x40>
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0eb      	beq.n	8003e5a <mem_cmp+0x18>

	return r;
 8003e82:	697b      	ldr	r3, [r7, #20]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3724      	adds	r7, #36	; 0x24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003e9a:	e002      	b.n	8003ea2 <chk_chr+0x12>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <chk_chr+0x26>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d1f2      	bne.n	8003e9c <chk_chr+0xc>
	return *str;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e029      	b.n	8003f30 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003edc:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <chk_lock+0xb4>)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	4413      	add	r3, r2
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01d      	beq.n	8003f26 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <chk_lock+0xb4>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d116      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <chk_lock+0xb4>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10c      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003f10:	4a1a      	ldr	r2, [pc, #104]	; (8003f7c <chk_lock+0xb4>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	4413      	add	r3, r2
 8003f18:	3308      	adds	r3, #8
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d102      	bne.n	8003f2a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003f24:	e007      	b.n	8003f36 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d9d2      	bls.n	8003edc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d109      	bne.n	8003f50 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <chk_lock+0x80>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d101      	bne.n	8003f4c <chk_lock+0x84>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e010      	b.n	8003f6e <chk_lock+0xa6>
 8003f4c:	2312      	movs	r3, #18
 8003f4e:	e00e      	b.n	8003f6e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d108      	bne.n	8003f68 <chk_lock+0xa0>
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <chk_lock+0xb4>)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	330c      	adds	r3, #12
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d101      	bne.n	8003f6c <chk_lock+0xa4>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	e000      	b.n	8003f6e <chk_lock+0xa6>
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	200000b8 	.word	0x200000b8

08003f80 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	e002      	b.n	8003f92 <enq_lock+0x12>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d806      	bhi.n	8003fa6 <enq_lock+0x26>
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <enq_lock+0x40>)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f2      	bne.n	8003f8c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	200000b8 	.word	0x200000b8

08003fc4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e01f      	b.n	8004014 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003fd4:	4a41      	ldr	r2, [pc, #260]	; (80040dc <inc_lock+0x118>)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	4413      	add	r3, r2
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d113      	bne.n	800400e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	; (80040dc <inc_lock+0x118>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d109      	bne.n	800400e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <inc_lock+0x118>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	3308      	adds	r3, #8
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800400a:	429a      	cmp	r2, r3
 800400c:	d006      	beq.n	800401c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d9dc      	bls.n	8003fd4 <inc_lock+0x10>
 800401a:	e000      	b.n	800401e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800401c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d132      	bne.n	800408a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e002      	b.n	8004030 <inc_lock+0x6c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3301      	adds	r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d806      	bhi.n	8004044 <inc_lock+0x80>
 8004036:	4a29      	ldr	r2, [pc, #164]	; (80040dc <inc_lock+0x118>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4413      	add	r3, r2
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f2      	bne.n	800402a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d101      	bne.n	800404e <inc_lock+0x8a>
 800404a:	2300      	movs	r3, #0
 800404c:	e040      	b.n	80040d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4922      	ldr	r1, [pc, #136]	; (80040dc <inc_lock+0x118>)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	440b      	add	r3, r1
 800405a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	491e      	ldr	r1, [pc, #120]	; (80040dc <inc_lock+0x118>)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	440b      	add	r3, r1
 8004068:	3304      	adds	r3, #4
 800406a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	491a      	ldr	r1, [pc, #104]	; (80040dc <inc_lock+0x118>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	440b      	add	r3, r1
 8004078:	3308      	adds	r3, #8
 800407a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800407c:	4a17      	ldr	r2, [pc, #92]	; (80040dc <inc_lock+0x118>)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	330c      	adds	r3, #12
 8004086:	2200      	movs	r2, #0
 8004088:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <inc_lock+0xe0>
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <inc_lock+0x118>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	4413      	add	r3, r2
 8004098:	330c      	adds	r3, #12
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <inc_lock+0xe0>
 80040a0:	2300      	movs	r3, #0
 80040a2:	e015      	b.n	80040d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <inc_lock+0xf8>
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <inc_lock+0x118>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	4413      	add	r3, r2
 80040b2:	330c      	adds	r3, #12
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	e001      	b.n	80040c0 <inc_lock+0xfc>
 80040bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c0:	4906      	ldr	r1, [pc, #24]	; (80040dc <inc_lock+0x118>)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	440b      	add	r3, r1
 80040c8:	330c      	adds	r3, #12
 80040ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	200000b8 	.word	0x200000b8

080040e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d825      	bhi.n	8004140 <dec_lock+0x60>
		n = Files[i].ctr;
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <dec_lock+0x74>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	4413      	add	r3, r2
 80040fc:	330c      	adds	r3, #12
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004102:	89fb      	ldrh	r3, [r7, #14]
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d101      	bne.n	800410e <dec_lock+0x2e>
 800410a:	2300      	movs	r3, #0
 800410c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800410e:	89fb      	ldrh	r3, [r7, #14]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <dec_lock+0x3a>
 8004114:	89fb      	ldrh	r3, [r7, #14]
 8004116:	3b01      	subs	r3, #1
 8004118:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <dec_lock+0x74>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	4413      	add	r3, r2
 8004122:	330c      	adds	r3, #12
 8004124:	89fa      	ldrh	r2, [r7, #14]
 8004126:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004128:	89fb      	ldrh	r3, [r7, #14]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <dec_lock+0x5a>
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <dec_lock+0x74>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	737b      	strb	r3, [r7, #13]
 800413e:	e001      	b.n	8004144 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004140:	2302      	movs	r3, #2
 8004142:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004144:	7b7b      	ldrb	r3, [r7, #13]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	200000b8 	.word	0x200000b8

08004158 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e010      	b.n	8004188 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <clear_lock+0x44>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4413      	add	r3, r2
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d105      	bne.n	8004182 <clear_lock+0x2a>
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <clear_lock+0x44>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	4413      	add	r3, r2
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3301      	adds	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d9eb      	bls.n	8004166 <clear_lock+0xe>
	}
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	200000b8 	.word	0x200000b8

080041a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d034      	beq.n	800421e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7858      	ldrb	r0, [r3, #1]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041c4:	2301      	movs	r3, #1
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	f7ff fd40 	bl	8003c4c <disk_write>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e022      	b.n	800421e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d217      	bcs.n	800421e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	789b      	ldrb	r3, [r3, #2]
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	e010      	b.n	8004218 <sync_window+0x78>
					wsect += fs->fsize;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7858      	ldrb	r0, [r3, #1]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800420a:	2301      	movs	r3, #1
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	f7ff fd1d 	bl	8003c4c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3b01      	subs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d8eb      	bhi.n	80041f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d01b      	beq.n	8004278 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffad 	bl	80041a0 <sync_window>
 8004246:	4603      	mov	r3, r0
 8004248:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d113      	bne.n	8004278 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7858      	ldrb	r0, [r3, #1]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800425a:	2301      	movs	r3, #1
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	f7ff fcd5 	bl	8003c0c <disk_read>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff87 	bl	80041a0 <sync_window>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d158      	bne.n	800434e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d148      	bne.n	8004336 <sync_fs+0xb2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	791b      	ldrb	r3, [r3, #4]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d144      	bne.n	8004336 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3334      	adds	r3, #52	; 0x34
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fda9 	bl	8003e0e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3334      	adds	r3, #52	; 0x34
 80042c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80042c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fd38 	bl	8003d3e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3334      	adds	r3, #52	; 0x34
 80042d2:	4921      	ldr	r1, [pc, #132]	; (8004358 <sync_fs+0xd4>)
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fd4d 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3334      	adds	r3, #52	; 0x34
 80042de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80042e2:	491e      	ldr	r1, [pc, #120]	; (800435c <sync_fs+0xd8>)
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fd45 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3334      	adds	r3, #52	; 0x34
 80042ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4619      	mov	r1, r3
 80042f8:	4610      	mov	r0, r2
 80042fa:	f7ff fd3b 	bl	8003d74 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3334      	adds	r3, #52	; 0x34
 8004302:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7ff fd31 	bl	8003d74 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7858      	ldrb	r0, [r3, #1]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800432a:	2301      	movs	r3, #1
 800432c:	f7ff fc8e 	bl	8003c4c <disk_write>
			fs->fsi_flag = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fca4 	bl	8003c8c <disk_ioctl>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <sync_fs+0xca>
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	41615252 	.word	0x41615252
 800435c:	61417272 	.word	0x61417272

08004360 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	3b02      	subs	r3, #2
 800436e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	1e9a      	subs	r2, r3, #2
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d801      	bhi.n	8004380 <clust2sect+0x20>
 800437c:	2300      	movs	r3, #0
 800437e:	e008      	b.n	8004392 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	895b      	ldrh	r3, [r3, #10]
 8004384:	461a      	mov	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	fb03 f202 	mul.w	r2, r3, r2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4413      	add	r3, r2
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d904      	bls.n	80043be <get_fat+0x20>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d802      	bhi.n	80043c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e08c      	b.n	80044de <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d045      	beq.n	800445e <get_fat+0xc0>
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d05d      	beq.n	8004492 <get_fat+0xf4>
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d177      	bne.n	80044ca <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	0a5b      	lsrs	r3, r3, #9
 80043f0:	4413      	add	r3, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f7ff ff17 	bl	8004228 <move_window>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d167      	bne.n	80044d0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	60fa      	str	r2, [r7, #12]
 8004406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004412:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	0a5b      	lsrs	r3, r3, #9
 800441c:	4413      	add	r3, r2
 800441e:	4619      	mov	r1, r3
 8004420:	6938      	ldr	r0, [r7, #16]
 8004422:	f7ff ff01 	bl	8004228 <move_window>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d153      	bne.n	80044d4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4413      	add	r3, r2
 8004436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <get_fat+0xb6>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	e002      	b.n	800445a <get_fat+0xbc>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	617b      	str	r3, [r7, #20]
			break;
 800445c:	e03f      	b.n	80044de <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	4413      	add	r3, r2
 8004468:	4619      	mov	r1, r3
 800446a:	6938      	ldr	r0, [r7, #16]
 800446c:	f7ff fedc 	bl	8004228 <move_window>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d130      	bne.n	80044d8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004484:	4413      	add	r3, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fc1e 	bl	8003cc8 <ld_word>
 800448c:	4603      	mov	r3, r0
 800448e:	617b      	str	r3, [r7, #20]
			break;
 8004490:	e025      	b.n	80044de <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	09db      	lsrs	r3, r3, #7
 800449a:	4413      	add	r3, r2
 800449c:	4619      	mov	r1, r3
 800449e:	6938      	ldr	r0, [r7, #16]
 80044a0:	f7ff fec2 	bl	8004228 <move_window>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80044b8:	4413      	add	r3, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fc1c 	bl	8003cf8 <ld_dword>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044c6:	617b      	str	r3, [r7, #20]
			break;
 80044c8:	e009      	b.n	80044de <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80044ca:	2301      	movs	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e006      	b.n	80044de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044d0:	bf00      	nop
 80044d2:	e004      	b.n	80044de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044d4:	bf00      	nop
 80044d6:	e002      	b.n	80044de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044dc:	bf00      	nop
		}
	}

	return val;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80044f4:	2302      	movs	r3, #2
 80044f6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f240 80d6 	bls.w	80046ac <put_fat+0x1c4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	f240 80d0 	bls.w	80046ac <put_fat+0x1c4>
		switch (fs->fs_type) {
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d073      	beq.n	80045fc <put_fat+0x114>
 8004514:	2b03      	cmp	r3, #3
 8004516:	f000 8091 	beq.w	800463c <put_fat+0x154>
 800451a:	2b01      	cmp	r3, #1
 800451c:	f040 80c6 	bne.w	80046ac <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	085b      	lsrs	r3, r3, #1
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	0a5b      	lsrs	r3, r3, #9
 8004536:	4413      	add	r3, r2
 8004538:	4619      	mov	r1, r3
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fe74 	bl	8004228 <move_window>
 8004540:	4603      	mov	r3, r0
 8004542:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004544:	7ffb      	ldrb	r3, [r7, #31]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 80a9 	bne.w	800469e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	61b9      	str	r1, [r7, #24]
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	4413      	add	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <put_fat+0x9e>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	b25b      	sxtb	r3, r3
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	b25a      	sxtb	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	b25b      	sxtb	r3, r3
 800457e:	4313      	orrs	r3, r2
 8004580:	b25b      	sxtb	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e001      	b.n	800458a <put_fat+0xa2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	0a5b      	lsrs	r3, r3, #9
 800459c:	4413      	add	r3, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe41 	bl	8004228 <move_window>
 80045a6:	4603      	mov	r3, r0
 80045a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045aa:	7ffb      	ldrb	r3, [r7, #31]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d178      	bne.n	80046a2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045bc:	4413      	add	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <put_fat+0xea>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e00e      	b.n	80045f0 <put_fat+0x108>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	b25a      	sxtb	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0a1b      	lsrs	r3, r3, #8
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	70da      	strb	r2, [r3, #3]
			break;
 80045fa:	e057      	b.n	80046ac <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	4413      	add	r3, r2
 8004606:	4619      	mov	r1, r3
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fe0d 	bl	8004228 <move_window>
 800460e:	4603      	mov	r3, r0
 8004610:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d146      	bne.n	80046a6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004626:	4413      	add	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	b292      	uxth	r2, r2
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fb85 	bl	8003d3e <st_word>
			fs->wflag = 1;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	70da      	strb	r2, [r3, #3]
			break;
 800463a:	e037      	b.n	80046ac <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	09db      	lsrs	r3, r3, #7
 8004644:	4413      	add	r3, r2
 8004646:	4619      	mov	r1, r3
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f7ff fded 	bl	8004228 <move_window>
 800464e:	4603      	mov	r3, r0
 8004650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004652:	7ffb      	ldrb	r3, [r7, #31]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d128      	bne.n	80046aa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800466c:	4413      	add	r3, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fb42 	bl	8003cf8 <ld_dword>
 8004674:	4603      	mov	r3, r0
 8004676:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800467a:	4323      	orrs	r3, r4
 800467c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800468c:	4413      	add	r3, r2
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fb6f 	bl	8003d74 <st_dword>
			fs->wflag = 1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	70da      	strb	r2, [r3, #3]
			break;
 800469c:	e006      	b.n	80046ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <put_fat+0x1c4>
			if (res != FR_OK) break;
 80046aa:	bf00      	nop
		}
	}
	return res;
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3724      	adds	r7, #36	; 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}

080046b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d904      	bls.n	80046dc <remove_chain+0x26>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d801      	bhi.n	80046e0 <remove_chain+0x2a>
 80046dc:	2302      	movs	r3, #2
 80046de:	e04b      	b.n	8004778 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046e6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	69b8      	ldr	r0, [r7, #24]
 80046ee:	f7ff fefb 	bl	80044e8 <put_fat>
 80046f2:	4603      	mov	r3, r0
 80046f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <remove_chain+0x4a>
 80046fc:	7ffb      	ldrb	r3, [r7, #31]
 80046fe:	e03b      	b.n	8004778 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fe4b 	bl	800439e <get_fat>
 8004708:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d031      	beq.n	8004774 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <remove_chain+0x64>
 8004716:	2302      	movs	r3, #2
 8004718:	e02e      	b.n	8004778 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d101      	bne.n	8004726 <remove_chain+0x70>
 8004722:	2301      	movs	r3, #1
 8004724:	e028      	b.n	8004778 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004726:	2200      	movs	r2, #0
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	69b8      	ldr	r0, [r7, #24]
 800472c:	f7ff fedc 	bl	80044e8 <put_fat>
 8004730:	4603      	mov	r3, r0
 8004732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004734:	7ffb      	ldrb	r3, [r7, #31]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <remove_chain+0x88>
 800473a:	7ffb      	ldrb	r3, [r7, #31]
 800473c:	e01c      	b.n	8004778 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	3b02      	subs	r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d20b      	bcs.n	8004764 <remove_chain+0xae>
			fs->free_clst++;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	791b      	ldrb	r3, [r3, #4]
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d8c6      	bhi.n	8004700 <remove_chain+0x4a>
 8004772:	e000      	b.n	8004776 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004774:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3720      	adds	r7, #32
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <create_chain+0x2c>
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d81b      	bhi.n	80047e4 <create_chain+0x64>
 80047ac:	2301      	movs	r3, #1
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e018      	b.n	80047e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fdf2 	bl	800439e <get_fat>
 80047ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d801      	bhi.n	80047c6 <create_chain+0x46>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e070      	b.n	80048a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d101      	bne.n	80047d2 <create_chain+0x52>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	e06a      	b.n	80048a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d901      	bls.n	80047e0 <create_chain+0x60>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	e063      	b.n	80048a8 <create_chain+0x128>
		scl = clst;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d807      	bhi.n	8004808 <create_chain+0x88>
				ncl = 2;
 80047f8:	2302      	movs	r3, #2
 80047fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	d901      	bls.n	8004808 <create_chain+0x88>
 8004804:	2300      	movs	r3, #0
 8004806:	e04f      	b.n	80048a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fdc7 	bl	800439e <get_fat>
 8004810:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d003      	beq.n	8004826 <create_chain+0xa6>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d101      	bne.n	800482a <create_chain+0xaa>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	e03e      	b.n	80048a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	429a      	cmp	r2, r3
 8004830:	d1da      	bne.n	80047e8 <create_chain+0x68>
 8004832:	2300      	movs	r3, #0
 8004834:	e038      	b.n	80048a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004836:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004838:	f04f 32ff 	mov.w	r2, #4294967295
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	6938      	ldr	r0, [r7, #16]
 8004840:	f7ff fe52 	bl	80044e8 <put_fat>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004848:	7dfb      	ldrb	r3, [r7, #23]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <create_chain+0xe2>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d006      	beq.n	8004862 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	6938      	ldr	r0, [r7, #16]
 800485a:	f7ff fe45 	bl	80044e8 <put_fat>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d116      	bne.n	8004896 <create_chain+0x116>
		fs->last_clst = ncl;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	3b02      	subs	r3, #2
 8004878:	429a      	cmp	r2, r3
 800487a:	d804      	bhi.n	8004886 <create_chain+0x106>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	791b      	ldrb	r3, [r3, #4]
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	711a      	strb	r2, [r3, #4]
 8004894:	e007      	b.n	80048a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d102      	bne.n	80048a2 <create_chain+0x122>
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	e000      	b.n	80048a4 <create_chain+0x124>
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80048a6:	69fb      	ldr	r3, [r7, #28]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	3304      	adds	r3, #4
 80048c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	0a5b      	lsrs	r3, r3, #9
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	8952      	ldrh	r2, [r2, #10]
 80048d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	613a      	str	r2, [r7, #16]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <clmt_clust+0x3a>
 80048e6:	2300      	movs	r3, #0
 80048e8:	e010      	b.n	800490c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d307      	bcc.n	8004902 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3304      	adds	r3, #4
 80048fe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004900:	e7e9      	b.n	80048d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004902:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	4413      	add	r3, r2
}
 800490c:	4618      	mov	r0, r3
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492e:	d204      	bcs.n	800493a <dir_sdi+0x22>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <dir_sdi+0x26>
		return FR_INT_ERR;
 800493a:	2302      	movs	r3, #2
 800493c:	e063      	b.n	8004a06 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <dir_sdi+0x46>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d902      	bls.n	800495e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	8912      	ldrh	r2, [r2, #8]
 800496c:	4293      	cmp	r3, r2
 800496e:	d301      	bcc.n	8004974 <dir_sdi+0x5c>
 8004970:	2302      	movs	r3, #2
 8004972:	e048      	b.n	8004a06 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	61da      	str	r2, [r3, #28]
 800497c:	e029      	b.n	80049d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	895b      	ldrh	r3, [r3, #10]
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004986:	e019      	b.n	80049bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff fd06 	bl	800439e <get_fat>
 8004992:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d101      	bne.n	80049a0 <dir_sdi+0x88>
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d904      	bls.n	80049b0 <dir_sdi+0x98>
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d801      	bhi.n	80049b4 <dir_sdi+0x9c>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e028      	b.n	8004a06 <dir_sdi+0xee>
			ofs -= csz;
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d2e1      	bcs.n	8004988 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	6938      	ldr	r0, [r7, #16]
 80049c8:	f7ff fcca 	bl	8004360 <clust2sect>
 80049cc:	4602      	mov	r2, r0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <dir_sdi+0xcc>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e010      	b.n	8004a06 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	441a      	add	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fe:	441a      	add	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	3320      	adds	r3, #32
 8004a24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <dir_next+0x28>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a34:	d301      	bcc.n	8004a3a <dir_next+0x2c>
 8004a36:	2304      	movs	r3, #4
 8004a38:	e0aa      	b.n	8004b90 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 8098 	bne.w	8004b76 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10b      	bne.n	8004a70 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	8912      	ldrh	r2, [r2, #8]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f0c0 8088 	bcc.w	8004b76 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	61da      	str	r2, [r3, #28]
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	e08f      	b.n	8004b90 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0a5b      	lsrs	r3, r3, #9
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	8952      	ldrh	r2, [r2, #10]
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d17a      	bne.n	8004b76 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7ff fc88 	bl	800439e <get_fat>
 8004a8e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d801      	bhi.n	8004a9a <dir_next+0x8c>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e07a      	b.n	8004b90 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d101      	bne.n	8004aa6 <dir_next+0x98>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e074      	b.n	8004b90 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d858      	bhi.n	8004b62 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	61da      	str	r2, [r3, #28]
 8004abc:	2304      	movs	r3, #4
 8004abe:	e067      	b.n	8004b90 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7ff fe59 	bl	8004780 <create_chain>
 8004ace:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <dir_next+0xcc>
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	e05a      	b.n	8004b90 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <dir_next+0xd6>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e055      	b.n	8004b90 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d101      	bne.n	8004af0 <dir_next+0xe2>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e04f      	b.n	8004b90 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fb55 	bl	80041a0 <sync_window>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <dir_next+0xf2>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e047      	b.n	8004b90 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3334      	adds	r3, #52	; 0x34
 8004b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f97f 	bl	8003e0e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	6979      	ldr	r1, [r7, #20]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f7ff fc22 	bl	8004360 <clust2sect>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
 8004b22:	e012      	b.n	8004b4a <dir_next+0x13c>
						fs->wflag = 1;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff fb38 	bl	80041a0 <sync_window>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <dir_next+0x12c>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e02a      	b.n	8004b90 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	895b      	ldrh	r3, [r3, #10]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d8e6      	bhi.n	8004b24 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004b68:	6979      	ldr	r1, [r7, #20]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fbf8 	bl	8004360 <clust2sect>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff feb4 	bl	8004918 <dir_sdi>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d12b      	bne.n	8004c12 <dir_alloc+0x7a>
		n = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7ff fb2f 	bl	8004228 <move_window>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d11d      	bne.n	8004c10 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2be5      	cmp	r3, #229	; 0xe5
 8004bdc:	d004      	beq.n	8004be8 <dir_alloc+0x50>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	3301      	adds	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d102      	bne.n	8004bfc <dir_alloc+0x64>
 8004bf6:	e00c      	b.n	8004c12 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff05 	bl	8004a0e <dir_next>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0d7      	beq.n	8004bbe <dir_alloc+0x26>
 8004c0e:	e000      	b.n	8004c12 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004c10:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d101      	bne.n	8004c1c <dir_alloc+0x84>
 8004c18:	2307      	movs	r3, #7
 8004c1a:	75fb      	strb	r3, [r7, #23]
	return res;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	331a      	adds	r3, #26
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff f847 	bl	8003cc8 <ld_word>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d109      	bne.n	8004c5a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f83c 	bl	8003cc8 <ld_word>
 8004c50:	4603      	mov	r3, r0
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	331a      	adds	r3, #26
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	b292      	uxth	r2, r2
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff f85f 	bl	8003d3e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d109      	bne.n	8004c9c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f103 0214 	add.w	r2, r3, #20
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f7ff f851 	bl	8003d3e <st_word>
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	331a      	adds	r3, #26
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff f808 	bl	8003cc8 <ld_word>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <cmp_lfn+0x1e>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e059      	b.n	8004d76 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	81fb      	strh	r3, [r7, #14]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e033      	b.n	8004d4a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004ce2:	4a27      	ldr	r2, [pc, #156]	; (8004d80 <cmp_lfn+0xdc>)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	461a      	mov	r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe ffe9 	bl	8003cc8 <ld_word>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004cfa:	89fb      	ldrh	r3, [r7, #14]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01a      	beq.n	8004d36 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2bfe      	cmp	r3, #254	; 0xfe
 8004d04:	d812      	bhi.n	8004d2c <cmp_lfn+0x88>
 8004d06:	89bb      	ldrh	r3, [r7, #12]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 fed3 	bl	8006ab4 <ff_wtoupper>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461c      	mov	r4, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	617a      	str	r2, [r7, #20]
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fec7 	bl	8006ab4 <ff_wtoupper>
 8004d26:	4603      	mov	r3, r0
 8004d28:	429c      	cmp	r4, r3
 8004d2a:	d001      	beq.n	8004d30 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e022      	b.n	8004d76 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004d30:	89bb      	ldrh	r3, [r7, #12]
 8004d32:	81fb      	strh	r3, [r7, #14]
 8004d34:	e006      	b.n	8004d44 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004d36:	89bb      	ldrh	r3, [r7, #12]
 8004d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d001      	beq.n	8004d44 <cmp_lfn+0xa0>
 8004d40:	2300      	movs	r3, #0
 8004d42:	e018      	b.n	8004d76 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	3301      	adds	r3, #1
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d9c8      	bls.n	8004ce2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00b      	beq.n	8004d74 <cmp_lfn+0xd0>
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <cmp_lfn+0xd0>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <cmp_lfn+0xd0>
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8004d74:	2301      	movs	r3, #1
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	08007888 	.word	0x08007888

08004d84 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	461a      	mov	r2, r3
 8004d92:	460b      	mov	r3, r1
 8004d94:	71fb      	strb	r3, [r7, #7]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	330d      	adds	r3, #13
 8004d9e:	79ba      	ldrb	r2, [r7, #6]
 8004da0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	330b      	adds	r3, #11
 8004da6:	220f      	movs	r2, #15
 8004da8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	330c      	adds	r3, #12
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	331a      	adds	r3, #26
 8004db6:	2100      	movs	r1, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe ffc0 	bl	8003d3e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	1e5a      	subs	r2, r3, #1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	82fb      	strh	r3, [r7, #22]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004dd6:	8afb      	ldrh	r3, [r7, #22]
 8004dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <put_lfn+0x6c>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <put_lfn+0xcc>)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	4413      	add	r3, r2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	8afa      	ldrh	r2, [r7, #22]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe ff9b 	bl	8003d3e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004e08:	8afb      	ldrh	r3, [r7, #22]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <put_lfn+0x90>
 8004e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e12:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	3301      	adds	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	d9da      	bls.n	8004dd6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004e20:	8afb      	ldrh	r3, [r7, #22]
 8004e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d006      	beq.n	8004e38 <put_lfn+0xb4>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d103      	bne.n	8004e40 <put_lfn+0xbc>
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	79fa      	ldrb	r2, [r7, #7]
 8004e44:	701a      	strb	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	08007888 	.word	0x08007888

08004e54 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08c      	sub	sp, #48	; 0x30
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004e62:	220b      	movs	r2, #11
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7fe ffb0 	bl	8003dcc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d92b      	bls.n	8004eca <gen_numname+0x76>
		sr = seq;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004e76:	e022      	b.n	8004ebe <gen_numname+0x6a>
			wc = *lfn++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1c9a      	adds	r2, r3, #2
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004e82:	2300      	movs	r3, #0
 8004e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e86:	e017      	b.n	8004eb8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005a      	lsls	r2, r3, #1
 8004e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004e96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <gen_numname+0x5e>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004eac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004eb0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	d9e4      	bls.n	8004e88 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d8      	bne.n	8004e78 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004eca:	2307      	movs	r3, #7
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	3330      	adds	r3, #48	; 0x30
 8004eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ee2:	2b39      	cmp	r3, #57	; 0x39
 8004ee4:	d904      	bls.n	8004ef0 <gen_numname+0x9c>
 8004ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004eea:	3307      	adds	r3, #7
 8004eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004efa:	4413      	add	r3, r2
 8004efc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f00:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1de      	bne.n	8004ece <gen_numname+0x7a>
	ns[i] = '~';
 8004f10:	f107 0214 	add.w	r2, r7, #20
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	4413      	add	r3, r2
 8004f18:	227e      	movs	r2, #126	; 0x7e
 8004f1a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f20:	e017      	b.n	8004f52 <gen_numname+0xfe>
		if (IsDBCS1(dst[j])) {
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	4413      	add	r3, r2
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d90e      	bls.n	8004f4c <gen_numname+0xf8>
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2bff      	cmp	r3, #255	; 0xff
 8004f38:	d008      	beq.n	8004f4c <gen_numname+0xf8>
			if (j == i - 1) break;
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	1e5a      	subs	r2, r3, #1
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d100      	bne.n	8004f46 <gen_numname+0xf2>
 8004f44:	e00f      	b.n	8004f66 <gen_numname+0x112>
			j++;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	3301      	adds	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d205      	bcs.n	8004f66 <gen_numname+0x112>
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d1dd      	bne.n	8004f22 <gen_numname+0xce>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	441a      	add	r2, r3
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d808      	bhi.n	8004f88 <gen_numname+0x134>
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f7c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004f80:	440b      	add	r3, r1
 8004f82:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004f86:	e000      	b.n	8004f8a <gen_numname+0x136>
 8004f88:	2320      	movs	r3, #32
 8004f8a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2b07      	cmp	r3, #7
 8004f90:	d9e9      	bls.n	8004f66 <gen_numname+0x112>
}
 8004f92:	bf00      	nop
 8004f94:	3730      	adds	r7, #48	; 0x30
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004fa6:	230b      	movs	r3, #11
 8004fa8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	01db      	lsls	r3, r3, #7
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1c59      	adds	r1, r3, #1
 8004fba:	6079      	str	r1, [r7, #4]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ed      	bne.n	8004faa <sum_sfn+0x10>
	return sum;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004fea:	2100      	movs	r1, #0
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fc93 	bl	8004918 <dir_sdi>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <dir_find+0x24>
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	e0a9      	b.n	8005154 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005000:	23ff      	movs	r3, #255	; 0xff
 8005002:	753b      	strb	r3, [r7, #20]
 8005004:	7d3b      	ldrb	r3, [r7, #20]
 8005006:	757b      	strb	r3, [r7, #21]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4619      	mov	r1, r3
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f7ff f906 	bl	8004228 <move_window>
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f040 8090 	bne.w	8005148 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005030:	7dbb      	ldrb	r3, [r7, #22]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <dir_find+0x60>
 8005036:	2304      	movs	r3, #4
 8005038:	75fb      	strb	r3, [r7, #23]
 800503a:	e08a      	b.n	8005152 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	330b      	adds	r3, #11
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005050:	7dbb      	ldrb	r3, [r7, #22]
 8005052:	2be5      	cmp	r3, #229	; 0xe5
 8005054:	d007      	beq.n	8005066 <dir_find+0x8a>
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <dir_find+0x98>
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d006      	beq.n	8005074 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005066:	23ff      	movs	r3, #255	; 0xff
 8005068:	757b      	strb	r3, [r7, #21]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
 8005072:	e05e      	b.n	8005132 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d136      	bne.n	80050e8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d154      	bne.n	8005132 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005088:	7dbb      	ldrb	r3, [r7, #22]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	7b5b      	ldrb	r3, [r3, #13]
 8005098:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800509a:	7dbb      	ldrb	r3, [r7, #22]
 800509c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a0:	75bb      	strb	r3, [r7, #22]
 80050a2:	7dbb      	ldrb	r3, [r7, #22]
 80050a4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80050ae:	7dba      	ldrb	r2, [r7, #22]
 80050b0:	7d7b      	ldrb	r3, [r7, #21]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d115      	bne.n	80050e2 <dir_find+0x106>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	330d      	adds	r3, #13
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	7d3a      	ldrb	r2, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10e      	bne.n	80050e2 <dir_find+0x106>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7ff fde8 	bl	8004ca4 <cmp_lfn>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <dir_find+0x106>
 80050da:	7d7b      	ldrb	r3, [r7, #21]
 80050dc:	3b01      	subs	r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e000      	b.n	80050e4 <dir_find+0x108>
 80050e2:	23ff      	movs	r3, #255	; 0xff
 80050e4:	757b      	strb	r3, [r7, #21]
 80050e6:	e024      	b.n	8005132 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80050e8:	7d7b      	ldrb	r3, [r7, #21]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <dir_find+0x126>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff51 	bl	8004f9a <sum_sfn>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	7d3b      	ldrb	r3, [r7, #20]
 80050fe:	4293      	cmp	r3, r2
 8005100:	d024      	beq.n	800514c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <dir_find+0x14a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a18      	ldr	r0, [r3, #32]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3324      	adds	r3, #36	; 0x24
 8005118:	220b      	movs	r2, #11
 800511a:	4619      	mov	r1, r3
 800511c:	f7fe fe91 	bl	8003e42 <mem_cmp>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d014      	beq.n	8005150 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005126:	23ff      	movs	r3, #255	; 0xff
 8005128:	757b      	strb	r3, [r7, #21]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005132:	2100      	movs	r1, #0
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fc6a 	bl	8004a0e <dir_next>
 800513a:	4603      	mov	r3, r0
 800513c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f43f af65 	beq.w	8005010 <dir_find+0x34>
 8005146:	e004      	b.n	8005152 <dir_find+0x176>
		if (res != FR_OK) break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005150:	bf00      	nop

	return res;
 8005152:	7dfb      	ldrb	r3, [r7, #23]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08c      	sub	sp, #48	; 0x30
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005170:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <dir_register+0x20>
 8005178:	2306      	movs	r3, #6
 800517a:	e0e0      	b.n	800533e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e002      	b.n	8005188 <dir_register+0x2c>
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f4      	bne.n	8005182 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800519e:	f107 030c 	add.w	r3, r7, #12
 80051a2:	220c      	movs	r2, #12
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fe11 	bl	8003dcc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d032      	beq.n	800521a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2240      	movs	r2, #64	; 0x40
 80051b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80051bc:	2301      	movs	r3, #1
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c0:	e016      	b.n	80051f0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	68da      	ldr	r2, [r3, #12]
 80051cc:	f107 010c 	add.w	r1, r7, #12
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	f7ff fe3f 	bl	8004e54 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ff00 	bl	8004fdc <dir_find>
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80051e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	3301      	adds	r3, #1
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b63      	cmp	r3, #99	; 0x63
 80051f4:	d9e5      	bls.n	80051c2 <dir_register+0x66>
 80051f6:	e000      	b.n	80051fa <dir_register+0x9e>
			if (res != FR_OK) break;
 80051f8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	2b64      	cmp	r3, #100	; 0x64
 80051fe:	d101      	bne.n	8005204 <dir_register+0xa8>
 8005200:	2307      	movs	r3, #7
 8005202:	e09c      	b.n	800533e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005208:	2b04      	cmp	r3, #4
 800520a:	d002      	beq.n	8005212 <dir_register+0xb6>
 800520c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005210:	e095      	b.n	800533e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005212:	7dfa      	ldrb	r2, [r7, #23]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <dir_register+0xd8>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	330c      	adds	r3, #12
 8005228:	4a47      	ldr	r2, [pc, #284]	; (8005348 <dir_register+0x1ec>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	3301      	adds	r3, #1
 8005232:	e000      	b.n	8005236 <dir_register+0xda>
 8005234:	2301      	movs	r3, #1
 8005236:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005238:	6a39      	ldr	r1, [r7, #32]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fcac 	bl	8004b98 <dir_alloc>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800524a:	2b00      	cmp	r3, #0
 800524c:	d148      	bne.n	80052e0 <dir_register+0x184>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	3b01      	subs	r3, #1
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d042      	beq.n	80052e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	015b      	lsls	r3, r3, #5
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7ff fb56 	bl	8004918 <dir_sdi>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005276:	2b00      	cmp	r3, #0
 8005278:	d132      	bne.n	80052e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3324      	adds	r3, #36	; 0x24
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fe8b 	bl	8004f9a <sum_sfn>
 8005284:	4603      	mov	r3, r0
 8005286:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	4619      	mov	r1, r3
 800528e:	69f8      	ldr	r0, [r7, #28]
 8005290:	f7fe ffca 	bl	8004228 <move_window>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800529a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11d      	bne.n	80052de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	68d8      	ldr	r0, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a19      	ldr	r1, [r3, #32]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	7efb      	ldrb	r3, [r7, #27]
 80052b0:	f7ff fd68 	bl	8004d84 <put_lfn>
				fs->wflag = 1;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2201      	movs	r2, #1
 80052b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80052ba:	2100      	movs	r1, #0
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fba6 	bl	8004a0e <dir_next>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80052c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <dir_register+0x184>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1d5      	bne.n	8005288 <dir_register+0x12c>
 80052dc:	e000      	b.n	80052e0 <dir_register+0x184>
				if (res != FR_OK) break;
 80052de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80052e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d128      	bne.n	800533a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4619      	mov	r1, r3
 80052ee:	69f8      	ldr	r0, [r7, #28]
 80052f0:	f7fe ff9a 	bl	8004228 <move_window>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80052fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11b      	bne.n	800533a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	2220      	movs	r2, #32
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fd7f 	bl	8003e0e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a18      	ldr	r0, [r3, #32]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	220b      	movs	r2, #11
 800531a:	4619      	mov	r1, r3
 800531c:	f7fe fd56 	bl	8003dcc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	330c      	adds	r3, #12
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800532c:	f002 0218 	and.w	r2, r2, #24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2201      	movs	r2, #1
 8005338:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800533a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800533e:	4618      	mov	r0, r3
 8005340:	3730      	adds	r7, #48	; 0x30
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	4ec4ec4f 	.word	0x4ec4ec4f

0800534c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	61ba      	str	r2, [r7, #24]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800537a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800537c:	2b1f      	cmp	r3, #31
 800537e:	d96a      	bls.n	8005456 <create_name+0x10a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005382:	2b2f      	cmp	r3, #47	; 0x2f
 8005384:	d006      	beq.n	8005394 <create_name+0x48>
 8005386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005388:	2b5c      	cmp	r3, #92	; 0x5c
 800538a:	d110      	bne.n	80053ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800538c:	e002      	b.n	8005394 <create_name+0x48>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3301      	adds	r3, #1
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4413      	add	r3, r2
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b2f      	cmp	r3, #47	; 0x2f
 800539e:	d0f6      	beq.n	800538e <create_name+0x42>
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4413      	add	r3, r2
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b5c      	cmp	r3, #92	; 0x5c
 80053aa:	d0f0      	beq.n	800538e <create_name+0x42>
			break;
 80053ac:	e054      	b.n	8005458 <create_name+0x10c>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2bfe      	cmp	r3, #254	; 0xfe
 80053b2:	d901      	bls.n	80053b8 <create_name+0x6c>
 80053b4:	2306      	movs	r3, #6
 80053b6:	e1bf      	b.n	8005738 <create_name+0x3ec>
#if !_LFN_UNICODE
		w &= 0xFF;
 80053b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 80053be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d925      	bls.n	8005412 <create_name+0xc6>
 80053c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d021      	beq.n	8005412 <create_name+0xc6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	61ba      	str	r2, [r7, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 80053de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4413      	add	r3, r2
 80053ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
 80053ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053f2:	2b3f      	cmp	r3, #63	; 0x3f
 80053f4:	d903      	bls.n	80053fe <create_name+0xb2>
 80053f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053fa:	2b7e      	cmp	r3, #126	; 0x7e
 80053fc:	d909      	bls.n	8005412 <create_name+0xc6>
 80053fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005402:	2b00      	cmp	r3, #0
 8005404:	da03      	bge.n	800540e <create_name+0xc2>
 8005406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540a:	2bff      	cmp	r3, #255	; 0xff
 800540c:	d101      	bne.n	8005412 <create_name+0xc6>
 800540e:	2306      	movs	r3, #6
 8005410:	e192      	b.n	8005738 <create_name+0x3ec>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f001 faec 	bl	80069f4 <ff_convert>
 800541c:	4603      	mov	r3, r0
 800541e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <create_name+0xde>
 8005426:	2306      	movs	r3, #6
 8005428:	e186      	b.n	8005738 <create_name+0x3ec>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800542a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800542c:	2b7f      	cmp	r3, #127	; 0x7f
 800542e:	d809      	bhi.n	8005444 <create_name+0xf8>
 8005430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005432:	4619      	mov	r1, r3
 8005434:	489a      	ldr	r0, [pc, #616]	; (80056a0 <create_name+0x354>)
 8005436:	f7fe fd2b 	bl	8003e90 <chk_chr>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <create_name+0xf8>
 8005440:	2306      	movs	r3, #6
 8005442:	e179      	b.n	8005738 <create_name+0x3ec>
		lfn[di++] = w;					/* Store the Unicode character */
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	617a      	str	r2, [r7, #20]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005452:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005454:	e78a      	b.n	800536c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005456:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	441a      	add	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005464:	2b1f      	cmp	r3, #31
 8005466:	d801      	bhi.n	800546c <create_name+0x120>
 8005468:	2304      	movs	r3, #4
 800546a:	e000      	b.n	800546e <create_name+0x122>
 800546c:	2300      	movs	r3, #0
 800546e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005472:	e011      	b.n	8005498 <create_name+0x14c>
		w = lfn[di - 1];
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800547a:	3b01      	subs	r3, #1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005488:	2b20      	cmp	r3, #32
 800548a:	d002      	beq.n	8005492 <create_name+0x146>
 800548c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800548e:	2b2e      	cmp	r3, #46	; 0x2e
 8005490:	d106      	bne.n	80054a0 <create_name+0x154>
		di--;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	3b01      	subs	r3, #1
 8005496:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ea      	bne.n	8005474 <create_name+0x128>
 800549e:	e000      	b.n	80054a2 <create_name+0x156>
		if (w != ' ' && w != '.') break;
 80054a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	2200      	movs	r2, #0
 80054ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <create_name+0x16c>
 80054b4:	2306      	movs	r3, #6
 80054b6:	e13f      	b.n	8005738 <create_name+0x3ec>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	220b      	movs	r2, #11
 80054be:	2120      	movs	r1, #32
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fca4 	bl	8003e0e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80054c6:	2300      	movs	r3, #0
 80054c8:	61bb      	str	r3, [r7, #24]
 80054ca:	e002      	b.n	80054d2 <create_name+0x186>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4413      	add	r3, r2
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d0f5      	beq.n	80054cc <create_name+0x180>
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	2b2e      	cmp	r3, #46	; 0x2e
 80054ec:	d0ee      	beq.n	80054cc <create_name+0x180>
	if (si) cf |= NS_LOSS | NS_LFN;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <create_name+0x1bc>
 80054f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80054f8:	f043 0303 	orr.w	r3, r3, #3
 80054fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005500:	e002      	b.n	8005508 <create_name+0x1bc>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	3b01      	subs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <create_name+0x1d6>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005514:	3b01      	subs	r3, #1
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	2b2e      	cmp	r3, #46	; 0x2e
 8005520:	d1ef      	bne.n	8005502 <create_name+0x1b6>

	i = b = 0; ni = 8;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	2308      	movs	r3, #8
 800552e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	61ba      	str	r2, [r7, #24]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80aa 	beq.w	800569c <create_name+0x350>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800554a:	2b20      	cmp	r3, #32
 800554c:	d006      	beq.n	800555c <create_name+0x210>
 800554e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005550:	2b2e      	cmp	r3, #46	; 0x2e
 8005552:	d10a      	bne.n	800556a <create_name+0x21e>
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	429a      	cmp	r2, r3
 800555a:	d006      	beq.n	800556a <create_name+0x21e>
			cf |= NS_LOSS | NS_LFN; continue;
 800555c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005560:	f043 0303 	orr.w	r3, r3, #3
 8005564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005568:	e097      	b.n	800569a <create_name+0x34e>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	429a      	cmp	r2, r3
 8005570:	d203      	bcs.n	800557a <create_name+0x22e>
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d123      	bne.n	80055c2 <create_name+0x276>
			if (ni == 11) {				/* Long extension */
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	2b0b      	cmp	r3, #11
 800557e:	d106      	bne.n	800558e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
 8005580:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005584:	f043 0303 	orr.w	r3, r3, #3
 8005588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800558c:	e08d      	b.n	80056aa <create_name+0x35e>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	429a      	cmp	r2, r3
 8005594:	d005      	beq.n	80055a2 <create_name+0x256>
 8005596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800559a:	f043 0303 	orr.w	r3, r3, #3
 800559e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d87e      	bhi.n	80056a8 <create_name+0x35c>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	2308      	movs	r3, #8
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	230b      	movs	r3, #11
 80055b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80055b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055c0:	e06b      	b.n	800569a <create_name+0x34e>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80055c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c4:	2b7f      	cmp	r3, #127	; 0x7f
 80055c6:	d910      	bls.n	80055ea <create_name+0x29e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 80055c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fa72 	bl	8006ab4 <ff_wtoupper>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fa0d 	bl	80069f4 <ff_convert>
 80055da:	4603      	mov	r3, r0
 80055dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80055de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055e2:	f043 0302 	orr.w	r3, r3, #2
 80055e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
 80055ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ec:	2bff      	cmp	r3, #255	; 0xff
 80055ee:	d91a      	bls.n	8005626 <create_name+0x2da>
			if (i >= ni - 1) {
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d808      	bhi.n	800560c <create_name+0x2c0>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 80055fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055fe:	f043 0303 	orr.w	r3, r3, #3
 8005602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	e046      	b.n	800569a <create_name+0x34e>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	623a      	str	r2, [r7, #32]
 8005612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005614:	0a12      	lsrs	r2, r2, #8
 8005616:	b292      	uxth	r2, r2
 8005618:	b2d1      	uxtb	r1, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	4413      	add	r3, r2
 800561e:	460a      	mov	r2, r1
 8005620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005624:	e02f      	b.n	8005686 <create_name+0x33a>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <create_name+0x2f0>
 800562c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800562e:	4619      	mov	r1, r3
 8005630:	481c      	ldr	r0, [pc, #112]	; (80056a4 <create_name+0x358>)
 8005632:	f7fe fc2d 	bl	8003e90 <chk_chr>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <create_name+0x302>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800563c:	235f      	movs	r3, #95	; 0x5f
 800563e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005644:	f043 0303 	orr.w	r3, r3, #3
 8005648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800564c:	e01b      	b.n	8005686 <create_name+0x33a>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800564e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d909      	bls.n	8005668 <create_name+0x31c>
 8005654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005656:	2b5a      	cmp	r3, #90	; 0x5a
 8005658:	d806      	bhi.n	8005668 <create_name+0x31c>
					b |= 2;
 800565a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565e:	f043 0302 	orr.w	r3, r3, #2
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005666:	e00e      	b.n	8005686 <create_name+0x33a>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800566a:	2b60      	cmp	r3, #96	; 0x60
 800566c:	d90b      	bls.n	8005686 <create_name+0x33a>
 800566e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005670:	2b7a      	cmp	r3, #122	; 0x7a
 8005672:	d808      	bhi.n	8005686 <create_name+0x33a>
						b |= 1; w -= 0x20;
 8005674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005678:	f043 0301 	orr.w	r3, r3, #1
 800567c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005680:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005682:	3b20      	subs	r3, #32
 8005684:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	623a      	str	r2, [r7, #32]
 800568c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800568e:	b2d1      	uxtb	r1, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	460a      	mov	r2, r1
 8005696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800569a:	e749      	b.n	8005530 <create_name+0x1e4>
		if (!w) break;					/* Break on end of the LFN */
 800569c:	bf00      	nop
 800569e:	e004      	b.n	80056aa <create_name+0x35e>
 80056a0:	0800782c 	.word	0x0800782c
 80056a4:	08007838 	.word	0x08007838
			if (si > di) break;			/* No extension */
 80056a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056b0:	2be5      	cmp	r3, #229	; 0xe5
 80056b2:	d103      	bne.n	80056bc <create_name+0x370>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2205      	movs	r2, #5
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d104      	bne.n	80056cc <create_name+0x380>
 80056c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80056cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d005      	beq.n	80056e4 <create_name+0x398>
 80056d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d105      	bne.n	80056f0 <create_name+0x3a4>
 80056e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80056f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d117      	bne.n	800572c <create_name+0x3e0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80056fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <create_name+0x3c8>
 8005708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800570c:	f043 0310 	orr.w	r3, r3, #16
 8005710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b04      	cmp	r3, #4
 800571e:	d105      	bne.n	800572c <create_name+0x3e0>
 8005720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005732:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005736:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	; 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005754:	e002      	b.n	800575c <follow_path+0x1c>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b2f      	cmp	r3, #47	; 0x2f
 8005762:	d0f8      	beq.n	8005756 <follow_path+0x16>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b5c      	cmp	r3, #92	; 0x5c
 800576a:	d0f4      	beq.n	8005756 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2200      	movs	r2, #0
 8005770:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b1f      	cmp	r3, #31
 8005778:	d80a      	bhi.n	8005790 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005782:	2100      	movs	r1, #0
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff f8c7 	bl	8004918 <dir_sdi>
 800578a:	4603      	mov	r3, r0
 800578c:	75fb      	strb	r3, [r7, #23]
 800578e:	e043      	b.n	8005818 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005790:	463b      	mov	r3, r7
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fdd9 	bl	800534c <create_name>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d134      	bne.n	800580e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fc19 	bl	8004fdc <dir_find>
 80057aa:	4603      	mov	r3, r0
 80057ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d127      	bne.n	8005812 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057c2:	7afb      	ldrb	r3, [r7, #11]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d122      	bne.n	8005812 <follow_path+0xd2>
 80057cc:	2305      	movs	r3, #5
 80057ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80057d0:	e01f      	b.n	8005812 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11c      	bne.n	8005816 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	799b      	ldrb	r3, [r3, #6]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80057e8:	2305      	movs	r3, #5
 80057ea:	75fb      	strb	r3, [r7, #23]
 80057ec:	e014      	b.n	8005818 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fc:	4413      	add	r3, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f7ff fa10 	bl	8004c26 <ld_clust>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800580c:	e7c0      	b.n	8005790 <follow_path+0x50>
			if (res != FR_OK) break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <follow_path+0xd8>
				break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005816:	bf00      	nop
			}
		}
	}

	return res;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005822:	b480      	push	{r7}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d031      	beq.n	800589c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e002      	b.n	8005846 <get_ldnumber+0x24>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b1f      	cmp	r3, #31
 800584c:	d903      	bls.n	8005856 <get_ldnumber+0x34>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b3a      	cmp	r3, #58	; 0x3a
 8005854:	d1f4      	bne.n	8005840 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b3a      	cmp	r3, #58	; 0x3a
 800585c:	d11c      	bne.n	8005898 <get_ldnumber+0x76>
			tp = *path;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	60fa      	str	r2, [r7, #12]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	3b30      	subs	r3, #48	; 0x30
 800586e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b09      	cmp	r3, #9
 8005874:	d80e      	bhi.n	8005894 <get_ldnumber+0x72>
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	429a      	cmp	r2, r3
 800587c:	d10a      	bne.n	8005894 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d107      	bne.n	8005894 <get_ldnumber+0x72>
					vol = (int)i;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3301      	adds	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	e002      	b.n	800589e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800589c:	693b      	ldr	r3, [r7, #16]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	70da      	strb	r2, [r3, #3]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f04f 32ff 	mov.w	r2, #4294967295
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fe fcae 	bl	8004228 <move_window>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <check_fs+0x2a>
 80058d2:	2304      	movs	r3, #4
 80058d4:	e038      	b.n	8005948 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3334      	adds	r3, #52	; 0x34
 80058da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe f9f2 	bl	8003cc8 <ld_word>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <check_fs+0x48>
 80058f0:	2303      	movs	r3, #3
 80058f2:	e029      	b.n	8005948 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058fa:	2be9      	cmp	r3, #233	; 0xe9
 80058fc:	d009      	beq.n	8005912 <check_fs+0x66>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005904:	2beb      	cmp	r3, #235	; 0xeb
 8005906:	d11e      	bne.n	8005946 <check_fs+0x9a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800590e:	2b90      	cmp	r3, #144	; 0x90
 8005910:	d119      	bne.n	8005946 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3334      	adds	r3, #52	; 0x34
 8005916:	3336      	adds	r3, #54	; 0x36
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe f9ed 	bl	8003cf8 <ld_dword>
 800591e:	4603      	mov	r3, r0
 8005920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005924:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <check_fs+0xa4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <check_fs+0x82>
 800592a:	2300      	movs	r3, #0
 800592c:	e00c      	b.n	8005948 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3334      	adds	r3, #52	; 0x34
 8005932:	3352      	adds	r3, #82	; 0x52
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe f9df 	bl	8003cf8 <ld_dword>
 800593a:	4602      	mov	r2, r0
 800593c:	4b05      	ldr	r3, [pc, #20]	; (8005954 <check_fs+0xa8>)
 800593e:	429a      	cmp	r2, r3
 8005940:	d101      	bne.n	8005946 <check_fs+0x9a>
 8005942:	2300      	movs	r3, #0
 8005944:	e000      	b.n	8005948 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005946:	2302      	movs	r3, #2
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	00544146 	.word	0x00544146
 8005954:	33544146 	.word	0x33544146

08005958 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b096      	sub	sp, #88	; 0x58
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff ff58 	bl	8005822 <get_ldnumber>
 8005972:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	2b00      	cmp	r3, #0
 8005978:	da01      	bge.n	800597e <find_volume+0x26>
 800597a:	230b      	movs	r3, #11
 800597c:	e22e      	b.n	8005ddc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800597e:	4aa8      	ldr	r2, [pc, #672]	; (8005c20 <find_volume+0x2c8>)
 8005980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <find_volume+0x3a>
 800598e:	230c      	movs	r3, #12
 8005990:	e224      	b.n	8005ddc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005996:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d01a      	beq.n	80059de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe f8ed 	bl	8003b8c <disk_status>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10c      	bne.n	80059de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <find_volume+0x82>
 80059ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059d6:	230a      	movs	r3, #10
 80059d8:	e200      	b.n	8005ddc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80059da:	2300      	movs	r3, #0
 80059dc:	e1fe      	b.n	8005ddc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe f8e5 	bl	8003bc0 <disk_initialize>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e1e7      	b.n	8005ddc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <find_volume+0xca>
 8005a12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a1e:	230a      	movs	r3, #10
 8005a20:	e1dc      	b.n	8005ddc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a2a:	f7ff ff3f 	bl	80058ac <check_fs>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d14b      	bne.n	8005ad4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a40:	e01f      	b.n	8005a82 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a50:	4413      	add	r3, r2
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	3304      	adds	r3, #4
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d006      	beq.n	8005a6c <find_volume+0x114>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	3308      	adds	r3, #8
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe f948 	bl	8003cf8 <ld_dword>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	e000      	b.n	8005a6e <find_volume+0x116>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005a76:	440b      	add	r3, r1
 8005a78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7e:	3301      	adds	r3, #1
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
 8005a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d9dc      	bls.n	8005a42 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <find_volume+0x140>
 8005a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a94:	3b01      	subs	r3, #1
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005aa6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <find_volume+0x162>
 8005aae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ab2:	f7ff fefb 	bl	80058ac <check_fs>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	e000      	b.n	8005abc <find_volume+0x164>
 8005aba:	2303      	movs	r3, #3
 8005abc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d905      	bls.n	8005ad4 <find_volume+0x17c>
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	3301      	adds	r3, #1
 8005acc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d9e1      	bls.n	8005a98 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d101      	bne.n	8005ae0 <find_volume+0x188>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e17d      	b.n	8005ddc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d901      	bls.n	8005aec <find_volume+0x194>
 8005ae8:	230d      	movs	r3, #13
 8005aea:	e177      	b.n	8005ddc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	3334      	adds	r3, #52	; 0x34
 8005af0:	330b      	adds	r3, #11
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe f8e8 	bl	8003cc8 <ld_word>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afe:	d001      	beq.n	8005b04 <find_volume+0x1ac>
 8005b00:	230d      	movs	r3, #13
 8005b02:	e16b      	b.n	8005ddc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	3334      	adds	r3, #52	; 0x34
 8005b08:	3316      	adds	r3, #22
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe f8dc 	bl	8003cc8 <ld_word>
 8005b10:	4603      	mov	r3, r0
 8005b12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <find_volume+0x1d0>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	3334      	adds	r3, #52	; 0x34
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe f8e9 	bl	8003cf8 <ld_dword>
 8005b26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b2c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	789b      	ldrb	r3, [r3, #2]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d005      	beq.n	8005b4c <find_volume+0x1f4>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d001      	beq.n	8005b4c <find_volume+0x1f4>
 8005b48:	230d      	movs	r3, #13
 8005b4a:	e147      	b.n	8005ddc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	fb02 f303 	mul.w	r3, r2, r3
 8005b58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b68:	895b      	ldrh	r3, [r3, #10]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <find_volume+0x228>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	895b      	ldrh	r3, [r3, #10]
 8005b72:	461a      	mov	r2, r3
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	895b      	ldrh	r3, [r3, #10]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <find_volume+0x22c>
 8005b80:	230d      	movs	r3, #13
 8005b82:	e12b      	b.n	8005ddc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	3334      	adds	r3, #52	; 0x34
 8005b88:	3311      	adds	r3, #17
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f89c 	bl	8003cc8 <ld_word>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	891b      	ldrh	r3, [r3, #8]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <find_volume+0x252>
 8005ba6:	230d      	movs	r3, #13
 8005ba8:	e118      	b.n	8005ddc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	3334      	adds	r3, #52	; 0x34
 8005bae:	3313      	adds	r3, #19
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe f889 	bl	8003cc8 <ld_word>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <find_volume+0x276>
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	3334      	adds	r3, #52	; 0x34
 8005bc4:	3320      	adds	r3, #32
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe f896 	bl	8003cf8 <ld_dword>
 8005bcc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	3334      	adds	r3, #52	; 0x34
 8005bd2:	330e      	adds	r3, #14
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fe f877 	bl	8003cc8 <ld_word>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <find_volume+0x290>
 8005be4:	230d      	movs	r3, #13
 8005be6:	e0f9      	b.n	8005ddc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005be8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bec:	4413      	add	r3, r2
 8005bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf0:	8912      	ldrh	r2, [r2, #8]
 8005bf2:	0912      	lsrs	r2, r2, #4
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d201      	bcs.n	8005c06 <find_volume+0x2ae>
 8005c02:	230d      	movs	r3, #13
 8005c04:	e0ea      	b.n	8005ddc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c0e:	8952      	ldrh	r2, [r2, #10]
 8005c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <find_volume+0x2cc>
 8005c1c:	230d      	movs	r3, #13
 8005c1e:	e0dd      	b.n	8005ddc <find_volume+0x484>
 8005c20:	200000b0 	.word	0x200000b0
		fmt = FS_FAT32;
 8005c24:	2303      	movs	r3, #3
 8005c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d802      	bhi.n	8005c3a <find_volume+0x2e2>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d802      	bhi.n	8005c4a <find_volume+0x2f2>
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c56:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c5c:	441a      	add	r2, r3
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005c62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	441a      	add	r2, r3
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d11e      	bne.n	8005cb2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	3334      	adds	r3, #52	; 0x34
 8005c78:	332a      	adds	r3, #42	; 0x2a
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe f824 	bl	8003cc8 <ld_word>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <find_volume+0x332>
 8005c86:	230d      	movs	r3, #13
 8005c88:	e0a8      	b.n	8005ddc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8c:	891b      	ldrh	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <find_volume+0x33e>
 8005c92:	230d      	movs	r3, #13
 8005c94:	e0a2      	b.n	8005ddc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	3334      	adds	r3, #52	; 0x34
 8005c9a:	332c      	adds	r3, #44	; 0x2c
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe f82b 	bl	8003cf8 <ld_dword>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb0:	e01f      	b.n	8005cf2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	891b      	ldrh	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <find_volume+0x366>
 8005cba:	230d      	movs	r3, #13
 8005cbc:	e08e      	b.n	8005ddc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc4:	441a      	add	r2, r3
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d103      	bne.n	8005cda <find_volume+0x382>
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	e00a      	b.n	8005cf0 <find_volume+0x398>
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	085a      	lsrs	r2, r3, #1
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005cfc:	0a5b      	lsrs	r3, r3, #9
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d201      	bcs.n	8005d06 <find_volume+0x3ae>
 8005d02:	230d      	movs	r3, #13
 8005d04:	e06a      	b.n	8005ddc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d149      	bne.n	8005db8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	3334      	adds	r3, #52	; 0x34
 8005d28:	3330      	adds	r3, #48	; 0x30
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd ffcc 	bl	8003cc8 <ld_word>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d140      	bne.n	8005db8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d38:	3301      	adds	r3, #1
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d3e:	f7fe fa73 	bl	8004228 <move_window>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d137      	bne.n	8005db8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	3334      	adds	r3, #52	; 0x34
 8005d52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd ffb6 	bl	8003cc8 <ld_word>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d127      	bne.n	8005db8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	3334      	adds	r3, #52	; 0x34
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd ffc3 	bl	8003cf8 <ld_dword>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <find_volume+0x48c>)
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d11e      	bne.n	8005db8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	3334      	adds	r3, #52	; 0x34
 8005d7e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd ffb8 	bl	8003cf8 <ld_dword>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <find_volume+0x490>)
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d113      	bne.n	8005db8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	3334      	adds	r3, #52	; 0x34
 8005d94:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd ffad 	bl	8003cf8 <ld_dword>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	3334      	adds	r3, #52	; 0x34
 8005da8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fd ffa3 	bl	8003cf8 <ld_dword>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005dbe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <find_volume+0x494>)
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <find_volume+0x494>)
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <find_volume+0x494>)
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dd6:	f7fe f9bf 	bl	8004158 <clear_lock>
#endif
	return FR_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3758      	adds	r7, #88	; 0x58
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	41615252 	.word	0x41615252
 8005de8:	61417272 	.word	0x61417272
 8005dec:	200000b4 	.word	0x200000b4

08005df0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005dfa:	2309      	movs	r3, #9
 8005dfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01c      	beq.n	8005e3e <validate+0x4e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d018      	beq.n	8005e3e <validate+0x4e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d013      	beq.n	8005e3e <validate+0x4e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	889a      	ldrh	r2, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	88db      	ldrh	r3, [r3, #6]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d10c      	bne.n	8005e3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	785b      	ldrb	r3, [r3, #1]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd feae 	bl	8003b8c <disk_status>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <validate+0x4e>
			res = FR_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d102      	bne.n	8005e4a <validate+0x5a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	e000      	b.n	8005e4c <validate+0x5c>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	6013      	str	r3, [r2, #0]
	return res;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005e6e:	f107 0310 	add.w	r3, r7, #16
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fcd5 	bl	8005822 <get_ldnumber>
 8005e78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da01      	bge.n	8005e84 <f_mount+0x28>
 8005e80:	230b      	movs	r3, #11
 8005e82:	e02b      	b.n	8005edc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e84:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <f_mount+0x88>)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005e94:	69b8      	ldr	r0, [r7, #24]
 8005e96:	f7fe f95f 	bl	8004158 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	490d      	ldr	r1, [pc, #52]	; (8005ee4 <f_mount+0x88>)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <f_mount+0x66>
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d001      	beq.n	8005ec6 <f_mount+0x6a>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	e00a      	b.n	8005edc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ec6:	f107 010c 	add.w	r1, r7, #12
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fd41 	bl	8005958 <find_volume>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200000b0 	.word	0x200000b0

08005ee8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b09a      	sub	sp, #104	; 0x68
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <f_open+0x18>
 8005efc:	2309      	movs	r3, #9
 8005efe:	e1bd      	b.n	800627c <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f08:	79fa      	ldrb	r2, [r7, #7]
 8005f0a:	f107 0110 	add.w	r1, r7, #16
 8005f0e:	f107 0308 	add.w	r3, r7, #8
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fd20 	bl	8005958 <find_volume>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005f1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 81a1 	bne.w	800626a <f_open+0x382>
		dj.obj.fs = fs;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8005f2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f30:	f000 fe4a 	bl	8006bc8 <ff_memalloc>
 8005f34:	65b8      	str	r0, [r7, #88]	; 0x58
 8005f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <f_open+0x58>
 8005f3c:	2311      	movs	r3, #17
 8005f3e:	e19d      	b.n	800627c <f_open+0x394>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f44:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fbf6 	bl	8005740 <follow_path>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11a      	bne.n	8005f98 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005f62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f66:	b25b      	sxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da03      	bge.n	8005f74 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8005f6c:	2306      	movs	r3, #6
 8005f6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005f72:	e011      	b.n	8005f98 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf14      	ite	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	2300      	moveq	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fd ff9b 	bl	8003ec8 <chk_lock>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	f003 031c 	and.w	r3, r3, #28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d07f      	beq.n	80060a2 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8005fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d017      	beq.n	8005fda <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005faa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d10e      	bne.n	8005fd0 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005fb2:	f7fd ffe5 	bl	8003f80 <enq_lock>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d006      	beq.n	8005fca <f_open+0xe2>
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff f8cb 	bl	800515c <dir_register>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	e000      	b.n	8005fcc <f_open+0xe4>
 8005fca:	2312      	movs	r3, #18
 8005fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	f043 0308 	orr.w	r3, r3, #8
 8005fd6:	71fb      	strb	r3, [r7, #7]
 8005fd8:	e010      	b.n	8005ffc <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005fda:	7ebb      	ldrb	r3, [r7, #26]
 8005fdc:	f003 0311 	and.w	r3, r3, #17
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <f_open+0x104>
					res = FR_DENIED;
 8005fe4:	2307      	movs	r3, #7
 8005fe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005fea:	e007      	b.n	8005ffc <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <f_open+0x114>
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ffc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006000:	2b00      	cmp	r3, #0
 8006002:	d168      	bne.n	80060d6 <f_open+0x1ee>
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d063      	beq.n	80060d6 <f_open+0x1ee>
				dw = GET_FATTIME();
 800600e:	f000 feed 	bl	8006dec <get_fattime>
 8006012:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006016:	330e      	adds	r3, #14
 8006018:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800601a:	4618      	mov	r0, r3
 800601c:	f7fd feaa 	bl	8003d74 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	3316      	adds	r3, #22
 8006024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fea4 	bl	8003d74 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	330b      	adds	r3, #11
 8006030:	2220      	movs	r2, #32
 8006032:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fdf3 	bl	8004c26 <ld_clust>
 8006040:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006046:	2200      	movs	r2, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe fe0b 	bl	8004c64 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	331c      	adds	r3, #28
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fe8d 	bl	8003d74 <st_dword>
					fs->wflag = 1;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2201      	movs	r2, #1
 800605e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006062:	2b00      	cmp	r3, #0
 8006064:	d037      	beq.n	80060d6 <f_open+0x1ee>
						dw = fs->winsect;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	2200      	movs	r2, #0
 8006072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fb1e 	bl	80046b6 <remove_chain>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006080:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006084:	2b00      	cmp	r3, #0
 8006086:	d126      	bne.n	80060d6 <f_open+0x1ee>
							res = move_window(fs, dw);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe f8cb 	bl	8004228 <move_window>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800609c:	3a01      	subs	r2, #1
 800609e:	611a      	str	r2, [r3, #16]
 80060a0:	e019      	b.n	80060d6 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80060a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d115      	bne.n	80060d6 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80060aa:	7ebb      	ldrb	r3, [r7, #26]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <f_open+0x1d4>
					res = FR_NO_FILE;
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80060ba:	e00c      	b.n	80060d6 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <f_open+0x1ee>
 80060c6:	7ebb      	ldrb	r3, [r7, #26]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <f_open+0x1ee>
						res = FR_DENIED;
 80060d0:	2307      	movs	r3, #7
 80060d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80060d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d128      	bne.n	8006130 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <f_open+0x208>
				mode |= FA_MODIFIED;
 80060e8:	79fb      	ldrb	r3, [r7, #7]
 80060ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80060f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	f107 0314 	add.w	r3, r7, #20
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7fd ff54 	bl	8003fc4 <inc_lock>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <f_open+0x248>
 800612a:	2302      	movs	r3, #2
 800612c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 8095 	bne.w	8006264 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fd70 	bl	8004c26 <ld_clust>
 8006146:	4602      	mov	r2, r0
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800614c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614e:	331c      	adds	r3, #28
 8006150:	4618      	mov	r0, r3
 8006152:	f7fd fdd1 	bl	8003cf8 <ld_dword>
 8006156:	4602      	mov	r2, r0
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	88da      	ldrh	r2, [r3, #6]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	79fa      	ldrb	r2, [r7, #7]
 8006174:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3330      	adds	r3, #48	; 0x30
 800618c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006190:	2100      	movs	r1, #0
 8006192:	4618      	mov	r0, r3
 8006194:	f7fd fe3b 	bl	8003e0e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d060      	beq.n	8006264 <f_open+0x37c>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d05c      	beq.n	8006264 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	895b      	ldrh	r3, [r3, #10]
 80061b6:	025b      	lsls	r3, r3, #9
 80061b8:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c6:	e016      	b.n	80061f6 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe f8e6 	bl	800439e <get_fat>
 80061d2:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80061d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d802      	bhi.n	80061e0 <f_open+0x2f8>
 80061da:	2302      	movs	r3, #2
 80061dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80061e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d102      	bne.n	80061ee <f_open+0x306>
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80061ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <f_open+0x31e>
 80061fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	429a      	cmp	r2, r3
 8006204:	d8e0      	bhi.n	80061c8 <f_open+0x2e0>
				}
				fp->clust = clst;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800620c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006210:	2b00      	cmp	r3, #0
 8006212:	d127      	bne.n	8006264 <f_open+0x37c>
 8006214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	2b00      	cmp	r3, #0
 800621c:	d022      	beq.n	8006264 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe f89c 	bl	8004360 <clust2sect>
 8006228:	64b8      	str	r0, [r7, #72]	; 0x48
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <f_open+0x350>
						res = FR_INT_ERR;
 8006230:	2302      	movs	r3, #2
 8006232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006236:	e015      	b.n	8006264 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623a:	0a5a      	lsrs	r2, r3, #9
 800623c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800623e:	441a      	add	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	7858      	ldrb	r0, [r3, #1]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	2301      	movs	r3, #1
 8006254:	f7fd fcda 	bl	8003c0c <disk_read>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <f_open+0x37c>
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8006264:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006266:	f000 fcbb 	bl	8006be0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800626a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <f_open+0x390>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006278:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800627c:	4618      	mov	r0, r3
 800627e:	3768      	adds	r7, #104	; 0x68
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f107 0214 	add.w	r2, r7, #20
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fda3 	bl	8005df0 <validate>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80062b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <f_read+0x44>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	7d5b      	ldrb	r3, [r3, #21]
 80062bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80062c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <f_read+0x4a>
 80062c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062cc:	e115      	b.n	80064fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	7d1b      	ldrb	r3, [r3, #20]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <f_read+0x5a>
 80062da:	2307      	movs	r3, #7
 80062dc:	e10d      	b.n	80064fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	f240 80fe 	bls.w	80064f0 <f_read+0x26c>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80062f8:	e0fa      	b.n	80064f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 80c6 	bne.w	8006494 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	0a5b      	lsrs	r3, r3, #9
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	8952      	ldrh	r2, [r2, #10]
 8006312:	3a01      	subs	r2, #1
 8006314:	4013      	ands	r3, r2
 8006316:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d12f      	bne.n	800637e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	633b      	str	r3, [r7, #48]	; 0x30
 800632c:	e013      	b.n	8006356 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	4619      	mov	r1, r3
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fe fab7 	bl	80048b0 <clmt_clust>
 8006342:	6338      	str	r0, [r7, #48]	; 0x30
 8006344:	e007      	b.n	8006356 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f7fe f825 	bl	800439e <get_fat>
 8006354:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	d804      	bhi.n	8006366 <f_read+0xe2>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2202      	movs	r2, #2
 8006360:	755a      	strb	r2, [r3, #21]
 8006362:	2302      	movs	r3, #2
 8006364:	e0c9      	b.n	80064fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d104      	bne.n	8006378 <f_read+0xf4>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	755a      	strb	r2, [r3, #21]
 8006374:	2301      	movs	r3, #1
 8006376:	e0c0      	b.n	80064fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f7fd ffea 	bl	8004360 <clust2sect>
 800638c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <f_read+0x11a>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2202      	movs	r2, #2
 8006398:	755a      	strb	r2, [r3, #21]
 800639a:	2302      	movs	r3, #2
 800639c:	e0ad      	b.n	80064fa <f_read+0x276>
			sect += csect;
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0a5b      	lsrs	r3, r3, #9
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d039      	beq.n	8006426 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	4413      	add	r3, r2
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	8952      	ldrh	r2, [r2, #10]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d905      	bls.n	80063cc <f_read+0x148>
					cc = fs->csize - csect;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	461a      	mov	r2, r3
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	7858      	ldrb	r0, [r3, #1]
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063d6:	f7fd fc19 	bl	8003c0c <disk_read>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <f_read+0x166>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	755a      	strb	r2, [r3, #21]
 80063e6:	2301      	movs	r3, #1
 80063e8:	e087      	b.n	80064fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	7d1b      	ldrb	r3, [r3, #20]
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da14      	bge.n	800641e <f_read+0x19a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	429a      	cmp	r2, r3
 8006400:	d20d      	bcs.n	800641e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	025b      	lsls	r3, r3, #9
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	18d0      	adds	r0, r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3330      	adds	r3, #48	; 0x30
 8006414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006418:	4619      	mov	r1, r3
 800641a:	f7fd fcd7 	bl	8003dcc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	025b      	lsls	r3, r3, #9
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006424:	e050      	b.n	80064c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	429a      	cmp	r2, r3
 800642e:	d02e      	beq.n	800648e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	7d1b      	ldrb	r3, [r3, #20]
 8006434:	b25b      	sxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	da18      	bge.n	800646c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	7858      	ldrb	r0, [r3, #1]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	2301      	movs	r3, #1
 800644a:	f7fd fbff 	bl	8003c4c <disk_write>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <f_read+0x1da>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	755a      	strb	r2, [r3, #21]
 800645a:	2301      	movs	r3, #1
 800645c:	e04d      	b.n	80064fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	7d1b      	ldrb	r3, [r3, #20]
 8006462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	7858      	ldrb	r0, [r3, #1]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006476:	2301      	movs	r3, #1
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	f7fd fbc7 	bl	8003c0c <disk_read>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <f_read+0x20a>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	755a      	strb	r2, [r3, #21]
 800648a:	2301      	movs	r3, #1
 800648c:	e035      	b.n	80064fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80064a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d901      	bls.n	80064ae <f_read+0x22a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	4413      	add	r3, r2
 80064be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c0:	4619      	mov	r1, r3
 80064c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c4:	f7fd fc82 	bl	8003dcc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	4413      	add	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	619a      	str	r2, [r3, #24]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	441a      	add	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f47f af01 	bne.w	80062fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3738      	adds	r7, #56	; 0x38
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08c      	sub	sp, #48	; 0x30
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f107 0210 	add.w	r2, r7, #16
 8006520:	4611      	mov	r1, r2
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fc64 	bl	8005df0 <validate>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800652e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006532:	2b00      	cmp	r3, #0
 8006534:	d107      	bne.n	8006546 <f_write+0x44>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	7d5b      	ldrb	r3, [r3, #21]
 800653a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800653e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <f_write+0x4a>
 8006546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800654a:	e14b      	b.n	80067e4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7d1b      	ldrb	r3, [r3, #20]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <f_write+0x5a>
 8006558:	2307      	movs	r3, #7
 800655a:	e143      	b.n	80067e4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	f080 812d 	bcs.w	80067c8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	43db      	mvns	r3, r3
 8006574:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006576:	e127      	b.n	80067c8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 80e3 	bne.w	800674c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	0a5b      	lsrs	r3, r3, #9
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	8952      	ldrh	r2, [r2, #10]
 8006590:	3a01      	subs	r2, #1
 8006592:	4013      	ands	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d143      	bne.n	8006624 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10c      	bne.n	80065be <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d11a      	bne.n	80065e6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe f8e3 	bl	8004780 <create_chain>
 80065ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80065bc:	e013      	b.n	80065e6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7fe f96f 	bl	80048b0 <clmt_clust>
 80065d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80065d4:	e007      	b.n	80065e6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe f8ce 	bl	8004780 <create_chain>
 80065e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 80f2 	beq.w	80067d2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d104      	bne.n	80065fe <f_write+0xfc>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2202      	movs	r2, #2
 80065f8:	755a      	strb	r2, [r3, #21]
 80065fa:	2302      	movs	r3, #2
 80065fc:	e0f2      	b.n	80067e4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d104      	bne.n	8006610 <f_write+0x10e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	755a      	strb	r2, [r3, #21]
 800660c:	2301      	movs	r3, #1
 800660e:	e0e9      	b.n	80067e4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006614:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d102      	bne.n	8006624 <f_write+0x122>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006622:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	7d1b      	ldrb	r3, [r3, #20]
 8006628:	b25b      	sxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	da18      	bge.n	8006660 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	7858      	ldrb	r0, [r3, #1]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a1a      	ldr	r2, [r3, #32]
 800663c:	2301      	movs	r3, #1
 800663e:	f7fd fb05 	bl	8003c4c <disk_write>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <f_write+0x150>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	755a      	strb	r2, [r3, #21]
 800664e:	2301      	movs	r3, #1
 8006650:	e0c8      	b.n	80067e4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	7d1b      	ldrb	r3, [r3, #20]
 8006656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800665a:	b2da      	uxtb	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fd fe79 	bl	8004360 <clust2sect>
 800666e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <f_write+0x17e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2202      	movs	r2, #2
 800667a:	755a      	strb	r2, [r3, #21]
 800667c:	2302      	movs	r3, #2
 800667e:	e0b1      	b.n	80067e4 <f_write+0x2e2>
			sect += csect;
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	4413      	add	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d03c      	beq.n	800670e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	4413      	add	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	8952      	ldrh	r2, [r2, #10]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d905      	bls.n	80066ae <f_write+0x1ac>
					cc = fs->csize - csect;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	461a      	mov	r2, r3
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	7858      	ldrb	r0, [r3, #1]
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	f7fd fac8 	bl	8003c4c <disk_write>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <f_write+0x1ca>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2201      	movs	r2, #1
 80066c6:	755a      	strb	r2, [r3, #21]
 80066c8:	2301      	movs	r3, #1
 80066ca:	e08b      	b.n	80067e4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	1ad2      	subs	r2, r2, r3
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d215      	bcs.n	8006706 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1a      	ldr	r2, [r3, #32]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	025b      	lsls	r3, r3, #9
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066f2:	4619      	mov	r1, r3
 80066f4:	f7fd fb6a 	bl	8003dcc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	7d1b      	ldrb	r3, [r3, #20]
 80066fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006700:	b2da      	uxtb	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	025b      	lsls	r3, r3, #9
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800670c:	e03f      	b.n	800678e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1a      	ldr	r2, [r3, #32]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	429a      	cmp	r2, r3
 8006716:	d016      	beq.n	8006746 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006720:	429a      	cmp	r2, r3
 8006722:	d210      	bcs.n	8006746 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	7858      	ldrb	r0, [r3, #1]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800672e:	2301      	movs	r3, #1
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	f7fd fa6b 	bl	8003c0c <disk_read>
 8006736:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	755a      	strb	r2, [r3, #21]
 8006742:	2301      	movs	r3, #1
 8006744:	e04e      	b.n	80067e4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006754:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800675a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d901      	bls.n	8006766 <f_write+0x264>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006774:	4413      	add	r3, r2
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	69f9      	ldr	r1, [r7, #28]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fd fb26 	bl	8003dcc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	7d1b      	ldrb	r3, [r3, #20]
 8006784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	4413      	add	r3, r2
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	441a      	add	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	bf38      	it	cc
 80067ae:	461a      	movcc	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	60da      	str	r2, [r3, #12]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	441a      	add	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f47f aed4 	bne.w	8006578 <f_write+0x76>
 80067d0:	e000      	b.n	80067d4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7d1b      	ldrb	r3, [r3, #20]
 80067d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3730      	adds	r7, #48	; 0x30
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f107 0208 	add.w	r2, r7, #8
 80067fa:	4611      	mov	r1, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff faf7 	bl	8005df0 <validate>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d168      	bne.n	80068de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7d1b      	ldrb	r3, [r3, #20]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d062      	beq.n	80068de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7d1b      	ldrb	r3, [r3, #20]
 800681c:	b25b      	sxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	da15      	bge.n	800684e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	7858      	ldrb	r0, [r3, #1]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1a      	ldr	r2, [r3, #32]
 8006830:	2301      	movs	r3, #1
 8006832:	f7fd fa0b 	bl	8003c4c <disk_write>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <f_sync+0x54>
 800683c:	2301      	movs	r3, #1
 800683e:	e04f      	b.n	80068e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7d1b      	ldrb	r3, [r3, #20]
 8006844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006848:	b2da      	uxtb	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800684e:	f000 facd 	bl	8006dec <get_fattime>
 8006852:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fd fce3 	bl	8004228 <move_window>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d138      	bne.n	80068de <f_sync+0xf2>
					dir = fp->dir_ptr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	330b      	adds	r3, #11
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	320b      	adds	r2, #11
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	f042 0220 	orr.w	r2, r2, #32
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	461a      	mov	r2, r3
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	f7fe f9e8 	bl	8004c64 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f103 021c 	add.w	r2, r3, #28
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fd fa67 	bl	8003d74 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3316      	adds	r3, #22
 80068aa:	6939      	ldr	r1, [r7, #16]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fa61 	bl	8003d74 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3312      	adds	r3, #18
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fd fa40 	bl	8003d3e <st_word>
					fs->wflag = 1;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2201      	movs	r2, #1
 80068c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fcdc 	bl	8004284 <sync_fs>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7d1b      	ldrb	r3, [r3, #20]
 80068d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80068de:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff ff7b 	bl	80067ec <f_sync>
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d118      	bne.n	8006932 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fa71 	bl	8005df0 <validate>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10c      	bne.n	8006932 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	4618      	mov	r0, r3
 800691e:	f7fd fbdf 	bl	80040e0 <dec_lock>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006952:	4b1f      	ldr	r3, [pc, #124]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 8006954:	7a5b      	ldrb	r3, [r3, #9]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d131      	bne.n	80069c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800695c:	4b1c      	ldr	r3, [pc, #112]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 800695e:	7a5b      	ldrb	r3, [r3, #9]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	4b1a      	ldr	r3, [pc, #104]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 8006966:	2100      	movs	r1, #0
 8006968:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800696a:	4b19      	ldr	r3, [pc, #100]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 800696c:	7a5b      	ldrb	r3, [r3, #9]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 800697c:	7a5b      	ldrb	r3, [r3, #9]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 8006984:	4413      	add	r3, r2
 8006986:	79fa      	ldrb	r2, [r7, #7]
 8006988:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800698a:	4b11      	ldr	r3, [pc, #68]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 800698c:	7a5b      	ldrb	r3, [r3, #9]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	b2d1      	uxtb	r1, r2
 8006994:	4a0e      	ldr	r2, [pc, #56]	; (80069d0 <FATFS_LinkDriverEx+0x94>)
 8006996:	7251      	strb	r1, [r2, #9]
 8006998:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800699a:	7dbb      	ldrb	r3, [r7, #22]
 800699c:	3330      	adds	r3, #48	; 0x30
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3301      	adds	r3, #1
 80069a8:	223a      	movs	r2, #58	; 0x3a
 80069aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3302      	adds	r3, #2
 80069b0:	222f      	movs	r2, #47	; 0x2f
 80069b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	3303      	adds	r3, #3
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	200000d8 	.word	0x200000d8

080069d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069de:	2200      	movs	r2, #0
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff ffaa 	bl	800693c <FATFS_LinkDriverEx>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	6039      	str	r1, [r7, #0]
 80069fe:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	2b7f      	cmp	r3, #127	; 0x7f
 8006a04:	d802      	bhi.n	8006a0c <ff_convert+0x18>
		c = chr;
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	837b      	strh	r3, [r7, #26]
 8006a0a:	e047      	b.n	8006a9c <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEM code to unicode */
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <ff_convert+0x2a>
			p = oem2uni;
 8006a12:	4b26      	ldr	r3, [pc, #152]	; (8006aac <ff_convert+0xb8>)
 8006a14:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 8006a16:	f245 5320 	movw	r3, #21792	; 0x5520
 8006a1a:	60bb      	str	r3, [r7, #8]
 8006a1c:	e004      	b.n	8006a28 <ff_convert+0x34>
		} else {		/* Unicode to OEM code */
			p = uni2oem;
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <ff_convert+0xbc>)
 8006a20:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 8006a22:	f245 5320 	movw	r3, #21792	; 0x5520
 8006a26:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	e023      	b.n	8006a7a <ff_convert+0x86>
			i = li + (hi - li) / 2;
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	0fda      	lsrs	r2, r3, #31
 8006a3a:	4413      	add	r3, r2
 8006a3c:	105b      	asrs	r3, r3, #1
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d014      	beq.n	8006a82 <ff_convert+0x8e>
			if (chr > p[i * 2])
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d902      	bls.n	8006a70 <ff_convert+0x7c>
				li = i;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	e001      	b.n	8006a74 <ff_convert+0x80>
			else
				hi = i;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1d8      	bne.n	8006a32 <ff_convert+0x3e>
 8006a80:	e000      	b.n	8006a84 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 8006a82:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d006      	beq.n	8006a98 <ff_convert+0xa4>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	3302      	adds	r3, #2
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	e000      	b.n	8006a9a <ff_convert+0xa6>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	837b      	strh	r3, [r7, #26]
	}

	return c;
 8006a9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	; 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	0801cd1c 	.word	0x0801cd1c
 8006ab0:	08007898 	.word	0x08007898

08006ab4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d201      	bcs.n	8006aca <ff_wtoupper+0x16>
 8006ac6:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <ff_wtoupper+0x10c>)
 8006ac8:	e000      	b.n	8006acc <ff_wtoupper+0x18>
 8006aca:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <ff_wtoupper+0x110>)
 8006acc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	617a      	str	r2, [r7, #20]
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006ad8:	8a7b      	ldrh	r3, [r7, #18]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d068      	beq.n	8006bb0 <ff_wtoupper+0xfc>
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	8a7b      	ldrh	r3, [r7, #18]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d364      	bcc.n	8006bb0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	617a      	str	r2, [r7, #20]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	823b      	strh	r3, [r7, #16]
 8006af0:	8a3b      	ldrh	r3, [r7, #16]
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	81fb      	strh	r3, [r7, #14]
 8006af6:	8a3b      	ldrh	r3, [r7, #16]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	8a79      	ldrh	r1, [r7, #18]
 8006b00:	8a3b      	ldrh	r3, [r7, #16]
 8006b02:	440b      	add	r3, r1
 8006b04:	429a      	cmp	r2, r3
 8006b06:	da49      	bge.n	8006b9c <ff_wtoupper+0xe8>
			switch (cmd) {
 8006b08:	89fb      	ldrh	r3, [r7, #14]
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d84f      	bhi.n	8006bae <ff_wtoupper+0xfa>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <ff_wtoupper+0x60>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b61 	.word	0x08006b61
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b71 	.word	0x08006b71
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006b89 	.word	0x08006b89
 8006b34:	08006b91 	.word	0x08006b91
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	8a7b      	ldrh	r3, [r7, #18]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	80fb      	strh	r3, [r7, #6]
 8006b48:	e027      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	8a7b      	ldrh	r3, [r7, #18]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	80fb      	strh	r3, [r7, #6]
 8006b5e:	e01c      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	3b10      	subs	r3, #16
 8006b64:	80fb      	strh	r3, [r7, #6]
 8006b66:	e018      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	3b20      	subs	r3, #32
 8006b6c:	80fb      	strh	r3, [r7, #6]
 8006b6e:	e014      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	3b30      	subs	r3, #48	; 0x30
 8006b74:	80fb      	strh	r3, [r7, #6]
 8006b76:	e010      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	3b1a      	subs	r3, #26
 8006b7c:	80fb      	strh	r3, [r7, #6]
 8006b7e:	e00c      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	3308      	adds	r3, #8
 8006b84:	80fb      	strh	r3, [r7, #6]
 8006b86:	e008      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	3b50      	subs	r3, #80	; 0x50
 8006b8c:	80fb      	strh	r3, [r7, #6]
 8006b8e:	e004      	b.n	8006b9a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006b96:	80fb      	strh	r3, [r7, #6]
 8006b98:	bf00      	nop
			}
			break;
 8006b9a:	e008      	b.n	8006bae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d195      	bne.n	8006ace <ff_wtoupper+0x1a>
 8006ba2:	8a3b      	ldrh	r3, [r7, #16]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006bac:	e78f      	b.n	8006ace <ff_wtoupper+0x1a>
			break;
 8006bae:	bf00      	nop
	}

	return chr;
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	080321a0 	.word	0x080321a0
 8006bc4:	08032394 	.word	0x08032394

08006bc8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fd49 	bl	8007668 <malloc>
 8006bd6:	4603      	mov	r3, r0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fd45 	bl	8007678 <free>
}
 8006bee:	bf00      	nop
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006c02:	f000 f8ac 	bl	8006d5e <BSP_SD_IsDetected>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d001      	beq.n	8006c10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e012      	b.n	8006c36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006c10:	480b      	ldr	r0, [pc, #44]	; (8006c40 <BSP_SD_Init+0x48>)
 8006c12:	f7fa fea5 	bl	8001960 <HAL_SD_Init>
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c24:	4806      	ldr	r0, [pc, #24]	; (8006c40 <BSP_SD_Init+0x48>)
 8006c26:	f7fb fdea 	bl	80027fe <HAL_SD_ConfigWideBusOperation>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006c34:	79fb      	ldrb	r3, [r7, #7]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000690 	.word	0x20000690

08006c44 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	68f9      	ldr	r1, [r7, #12]
 8006c60:	4806      	ldr	r0, [pc, #24]	; (8006c7c <BSP_SD_ReadBlocks+0x38>)
 8006c62:	f7fa ff05 	bl	8001a70 <HAL_SD_ReadBlocks>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000690 	.word	0x20000690

08006c80 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	4806      	ldr	r0, [pc, #24]	; (8006cb8 <BSP_SD_WriteBlocks+0x38>)
 8006c9e:	f7fb f87e 	bl	8001d9e <HAL_SD_WriteBlocks>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000690 	.word	0x20000690

08006cbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006cc0:	4805      	ldr	r0, [pc, #20]	; (8006cd8 <BSP_SD_GetCardState+0x1c>)
 8006cc2:	f7fb fe18 	bl	80028f6 <HAL_SD_GetCardState>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000690 	.word	0x20000690

08006cdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4803      	ldr	r0, [pc, #12]	; (8006cf4 <BSP_SD_GetCardInfo+0x18>)
 8006ce8:	f7fb fd5d 	bl	80027a6 <HAL_SD_GetCardInfo>
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000690 	.word	0x20000690

08006cf8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006d00:	f000 f818 	bl	8006d34 <BSP_SD_AbortCallback>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006d14:	f000 f815 	bl	8006d42 <BSP_SD_WriteCpltCallback>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006d28:	f000 f812 	bl	8006d50 <BSP_SD_ReadCpltCallback>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0

}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006d42:	b480      	push	{r7}
 8006d44:	af00      	add	r7, sp, #0

}
 8006d46:	bf00      	nop
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0

}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006d64:	2301      	movs	r3, #1
 8006d66:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	b2db      	uxtb	r3, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <MX_DMA_Init+0x4c>)
 8006d84:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <MX_DMA_Init+0x4c>)
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <MX_DMA_Init+0x4c>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	203b      	movs	r0, #59	; 0x3b
 8006da0:	f7f9 fd07 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006da4:	203b      	movs	r0, #59	; 0x3b
 8006da6:	f7f9 fd20 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2102      	movs	r1, #2
 8006dae:	2045      	movs	r0, #69	; 0x45
 8006db0:	f7f9 fcff 	bl	80007b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006db4:	2045      	movs	r0, #69	; 0x45
 8006db6:	f7f9 fd18 	bl	80007ea <HAL_NVIC_EnableIRQ>

}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800

08006dc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006dcc:	4904      	ldr	r1, [pc, #16]	; (8006de0 <MX_FATFS_Init+0x18>)
 8006dce:	4805      	ldr	r0, [pc, #20]	; (8006de4 <MX_FATFS_Init+0x1c>)
 8006dd0:	f7ff fe00 	bl	80069d4 <FATFS_LinkDriver>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <MX_FATFS_Init+0x20>)
 8006dda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	200000f8 	.word	0x200000f8
 8006de4:	08032450 	.word	0x08032450
 8006de8:	200000f4 	.word	0x200000f4

08006dec <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006df0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e08:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e10:	6313      	str	r3, [r2, #48]	; 0x30
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	4a10      	ldr	r2, [pc, #64]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e28:	f043 0304 	orr.w	r3, r3, #4
 8006e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	f043 0308 	orr.w	r3, r3, #8
 8006e48:	6313      	str	r3, [r2, #48]	; 0x30
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <MX_GPIO_Init+0x68>)
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]

}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40023800 	.word	0x40023800

08006e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006e6c:	f7f9 fb34 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e70:	f000 f86a 	bl	8006f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e74:	f7ff ffc2 	bl	8006dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8006e78:	f7ff ff7e 	bl	8006d78 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8006e7c:	f000 f9ba 	bl	80071f4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8006e80:	f7ff ffa2 	bl	8006dc8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 8006e84:	2200      	movs	r2, #0
 8006e86:	4927      	ldr	r1, [pc, #156]	; (8006f24 <main+0xbc>)
 8006e88:	4827      	ldr	r0, [pc, #156]	; (8006f28 <main+0xc0>)
 8006e8a:	f7fe ffe7 	bl	8005e5c <f_mount>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d000      	beq.n	8006e96 <main+0x2e>
	  while (1);
 8006e94:	e7fe      	b.n	8006e94 <main+0x2c>
  } else {
	  if (f_open (&SDFile, "stm32.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
 8006e96:	220a      	movs	r2, #10
 8006e98:	4924      	ldr	r1, [pc, #144]	; (8006f2c <main+0xc4>)
 8006e9a:	4825      	ldr	r0, [pc, #148]	; (8006f30 <main+0xc8>)
 8006e9c:	f7ff f824 	bl	8005ee8 <f_open>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d000      	beq.n	8006ea8 <main+0x40>
		  while (1);
 8006ea6:	e7fe      	b.n	8006ea6 <main+0x3e>
	  } else {
		  res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8006ea8:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <main+0xcc>)
 8006eaa:	2221      	movs	r2, #33	; 0x21
 8006eac:	4922      	ldr	r1, [pc, #136]	; (8006f38 <main+0xd0>)
 8006eae:	4820      	ldr	r0, [pc, #128]	; (8006f30 <main+0xc8>)
 8006eb0:	f7ff fb27 	bl	8006502 <f_write>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <main+0xd4>)
 8006eba:	701a      	strb	r2, [r3, #0]

		  if ((byteswritten == 0) || (res != FR_OK))
 8006ebc:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <main+0xcc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <main+0x64>
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <main+0xd4>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d000      	beq.n	8006ece <main+0x66>
		  {
			  while (1);
 8006ecc:	e7fe      	b.n	8006ecc <main+0x64>
		  }
		  else
		  {
			  f_close(&SDFile);
 8006ece:	4818      	ldr	r0, [pc, #96]	; (8006f30 <main+0xc8>)
 8006ed0:	f7ff fd0a 	bl	80068e8 <f_close>

			  if (f_open (&SDFile, "stm32.txt", FA_READ) != FR_OK)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	4915      	ldr	r1, [pc, #84]	; (8006f2c <main+0xc4>)
 8006ed8:	4815      	ldr	r0, [pc, #84]	; (8006f30 <main+0xc8>)
 8006eda:	f7ff f805 	bl	8005ee8 <f_open>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d000      	beq.n	8006ee6 <main+0x7e>
			  {
				  while (1);
 8006ee4:	e7fe      	b.n	8006ee4 <main+0x7c>
			  }else {
				  res = f_read (&SDFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8006ee6:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <main+0xd8>)
 8006ee8:	2264      	movs	r2, #100	; 0x64
 8006eea:	4916      	ldr	r1, [pc, #88]	; (8006f44 <main+0xdc>)
 8006eec:	4810      	ldr	r0, [pc, #64]	; (8006f30 <main+0xc8>)
 8006eee:	f7ff f9c9 	bl	8006284 <f_read>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <main+0xd4>)
 8006ef8:	701a      	strb	r2, [r3, #0]

				  if ((bytesread == 0) || (res != FR_OK))
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <main+0xd8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <main+0xa2>
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <main+0xd4>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d000      	beq.n	8006f0c <main+0xa4>
				  {
					  while (1);
 8006f0a:	e7fe      	b.n	8006f0a <main+0xa2>
				  } else {
					  f_close(&SDFile);
 8006f0c:	4808      	ldr	r0, [pc, #32]	; (8006f30 <main+0xc8>)
 8006f0e:	f7ff fceb 	bl	80068e8 <f_close>

					  if (bytesread != byteswritten)
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <main+0xd8>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <main+0xcc>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d000      	beq.n	8006f20 <main+0xb8>
					  {
						  while (1);
 8006f1e:	e7fe      	b.n	8006f1e <main+0xb6>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006f20:	e7fe      	b.n	8006f20 <main+0xb8>
 8006f22:	bf00      	nop
 8006f24:	200000f8 	.word	0x200000f8
 8006f28:	2000032c 	.word	0x2000032c
 8006f2c:	08007874 	.word	0x08007874
 8006f30:	200000fc 	.word	0x200000fc
 8006f34:	20000560 	.word	0x20000560
 8006f38:	20000008 	.word	0x20000008
 8006f3c:	200005cc 	.word	0x200005cc
 8006f40:	20000564 	.word	0x20000564
 8006f44:	20000568 	.word	0x20000568

08006f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b094      	sub	sp, #80	; 0x50
 8006f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f4e:	f107 0320 	add.w	r3, r7, #32
 8006f52:	2230      	movs	r2, #48	; 0x30
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fb96 	bl	8007688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	4a28      	ldr	r2, [pc, #160]	; (8007014 <SystemClock_Config+0xcc>)
 8006f72:	4b28      	ldr	r3, [pc, #160]	; (8007014 <SystemClock_Config+0xcc>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <SystemClock_Config+0xcc>)
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f88:	2300      	movs	r3, #0
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <SystemClock_Config+0xd0>)
 8006f8e:	4b22      	ldr	r3, [pc, #136]	; (8007018 <SystemClock_Config+0xd0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <SystemClock_Config+0xd0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fac:	2310      	movs	r3, #16
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006fb8:	2308      	movs	r3, #8
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006fbc:	23a8      	movs	r3, #168	; 0xa8
 8006fbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006fc4:	2307      	movs	r3, #7
 8006fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fc8:	f107 0320 	add.w	r3, r7, #32
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fa f8cb 	bl	8001168 <HAL_RCC_OscConfig>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006fd8:	f000 f820 	bl	800701c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006fdc:	230f      	movs	r3, #15
 8006fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8006fee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006ff4:	f107 030c 	add.w	r3, r7, #12
 8006ff8:	2105      	movs	r1, #5
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fa faf6 	bl	80015ec <HAL_RCC_ClockConfig>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007006:	f000 f809 	bl	800701c <Error_Handler>
  }
}
 800700a:	bf00      	nop
 800700c:	3750      	adds	r7, #80	; 0x50
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	40023800 	.word	0x40023800
 8007018:	40007000 	.word	0x40007000

0800701c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007020:	bf00      	nop
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <SD_CheckStatus+0x38>)
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800703c:	f7ff fe3e 	bl	8006cbc <BSP_SD_GetCardState>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <SD_CheckStatus+0x38>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f023 0301 	bic.w	r3, r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4b04      	ldr	r3, [pc, #16]	; (8007064 <SD_CheckStatus+0x38>)
 8007054:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <SD_CheckStatus+0x38>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	b2db      	uxtb	r3, r3
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000029 	.word	0x20000029

08007068 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	4603      	mov	r3, r0
 8007070:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8007072:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <SD_initialize+0x38>)
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007078:	f7ff fdbe 	bl	8006bf8 <BSP_SD_Init>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ffd1 	bl	800702c <SD_CheckStatus>
 800708a:	4603      	mov	r3, r0
 800708c:	461a      	mov	r2, r3
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <SD_initialize+0x38>)
 8007090:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <SD_initialize+0x38>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b2db      	uxtb	r3, r3
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000029 	.word	0x20000029

080070a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80070ae:	79fb      	ldrb	r3, [r7, #7]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff ffbb 	bl	800702c <SD_CheckStatus>
 80070b6:	4603      	mov	r3, r0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80070d4:	f04f 33ff 	mov.w	r3, #4294967295
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	68b8      	ldr	r0, [r7, #8]
 80070de:	f7ff fdb1 	bl	8006c44 <BSP_SD_ReadBlocks>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d107      	bne.n	80070f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80070e8:	bf00      	nop
 80070ea:	f7ff fde7 	bl	8006cbc <BSP_SD_GetCardState>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1fa      	bne.n	80070ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007116:	f04f 33ff 	mov.w	r3, #4294967295
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	68b8      	ldr	r0, [r7, #8]
 8007120:	f7ff fdae 	bl	8006c80 <BSP_SD_WriteBlocks>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d107      	bne.n	800713a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800712a:	bf00      	nop
 800712c:	f7ff fdc6 	bl	8006cbc <BSP_SD_GetCardState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1fa      	bne.n	800712c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08c      	sub	sp, #48	; 0x30
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	603a      	str	r2, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
 8007150:	460b      	mov	r3, r1
 8007152:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800715a:	4b25      	ldr	r3, [pc, #148]	; (80071f0 <SD_ioctl+0xac>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <SD_ioctl+0x28>
 8007168:	2303      	movs	r3, #3
 800716a:	e03c      	b.n	80071e6 <SD_ioctl+0xa2>

  switch (cmd)
 800716c:	79bb      	ldrb	r3, [r7, #6]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d834      	bhi.n	80071dc <SD_ioctl+0x98>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <SD_ioctl+0x34>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007189 	.word	0x08007189
 800717c:	08007191 	.word	0x08007191
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071c3 	.word	0x080071c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800718e:	e028      	b.n	80071e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007190:	f107 030c 	add.w	r3, r7, #12
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fda1 	bl	8006cdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800719a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071a6:	e01c      	b.n	80071e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fd95 	bl	8006cdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071c0:	e00f      	b.n	80071e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071c2:	f107 030c 	add.w	r3, r7, #12
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fd88 	bl	8006cdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	0a5a      	lsrs	r2, r3, #9
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071da:	e002      	b.n	80071e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80071e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3730      	adds	r7, #48	; 0x30
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000029 	.word	0x20000029

080071f4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <MX_SDIO_SD_Init+0x38>)
 80071fa:	4a0d      	ldr	r2, [pc, #52]	; (8007230 <MX_SDIO_SD_Init+0x3c>)
 80071fc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80071fe:	4b0b      	ldr	r3, [pc, #44]	; (800722c <MX_SDIO_SD_Init+0x38>)
 8007200:	2200      	movs	r2, #0
 8007202:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007204:	4b09      	ldr	r3, [pc, #36]	; (800722c <MX_SDIO_SD_Init+0x38>)
 8007206:	2200      	movs	r2, #0
 8007208:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800720a:	4b08      	ldr	r3, [pc, #32]	; (800722c <MX_SDIO_SD_Init+0x38>)
 800720c:	2200      	movs	r2, #0
 800720e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <MX_SDIO_SD_Init+0x38>)
 8007212:	2200      	movs	r2, #0
 8007214:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <MX_SDIO_SD_Init+0x38>)
 8007218:	2200      	movs	r2, #0
 800721a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <MX_SDIO_SD_Init+0x38>)
 800721e:	2202      	movs	r2, #2
 8007220:	619a      	str	r2, [r3, #24]

}
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	20000690 	.word	0x20000690
 8007230:	40012c00 	.word	0x40012c00

08007234 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08a      	sub	sp, #40	; 0x28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800723c:	f107 0314 	add.w	r3, r7, #20
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	60da      	str	r2, [r3, #12]
 800724a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a68      	ldr	r2, [pc, #416]	; (80073f4 <HAL_SD_MspInit+0x1c0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	f040 80c9 	bne.w	80073ea <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007258:	2300      	movs	r3, #0
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	4a66      	ldr	r2, [pc, #408]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 800725e:	4b66      	ldr	r3, [pc, #408]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007266:	6453      	str	r3, [r2, #68]	; 0x44
 8007268:	4b63      	ldr	r3, [pc, #396]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 800726a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007274:	2300      	movs	r3, #0
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	4a5f      	ldr	r2, [pc, #380]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 800727a:	4b5f      	ldr	r3, [pc, #380]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	6313      	str	r3, [r2, #48]	; 0x30
 8007284:	4b5c      	ldr	r3, [pc, #368]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007290:	2300      	movs	r3, #0
 8007292:	60bb      	str	r3, [r7, #8]
 8007294:	4a58      	ldr	r2, [pc, #352]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 8007296:	4b58      	ldr	r3, [pc, #352]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f043 0308 	orr.w	r3, r3, #8
 800729e:	6313      	str	r3, [r2, #48]	; 0x30
 80072a0:	4b55      	ldr	r3, [pc, #340]	; (80073f8 <HAL_SD_MspInit+0x1c4>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80072ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80072b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b2:	2302      	movs	r3, #2
 80072b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ba:	2303      	movs	r3, #3
 80072bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072be:	230c      	movs	r3, #12
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	4619      	mov	r1, r3
 80072c8:	484c      	ldr	r0, [pc, #304]	; (80073fc <HAL_SD_MspInit+0x1c8>)
 80072ca:	f7f9 fdb3 	bl	8000e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80072ce:	2304      	movs	r3, #4
 80072d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d2:	2302      	movs	r3, #2
 80072d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072da:	2303      	movs	r3, #3
 80072dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072de:	230c      	movs	r3, #12
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072e2:	f107 0314 	add.w	r3, r7, #20
 80072e6:	4619      	mov	r1, r3
 80072e8:	4845      	ldr	r0, [pc, #276]	; (8007400 <HAL_SD_MspInit+0x1cc>)
 80072ea:	f7f9 fda3 	bl	8000e34 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80072ee:	4b45      	ldr	r3, [pc, #276]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 80072f0:	4a45      	ldr	r2, [pc, #276]	; (8007408 <HAL_SD_MspInit+0x1d4>)
 80072f2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80072f4:	4b43      	ldr	r3, [pc, #268]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 80072f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80072fa:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072fc:	4b41      	ldr	r3, [pc, #260]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007302:	4b40      	ldr	r3, [pc, #256]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007304:	2200      	movs	r2, #0
 8007306:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007308:	4b3e      	ldr	r3, [pc, #248]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800730a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800730e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007310:	4b3c      	ldr	r3, [pc, #240]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007316:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007318:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800731a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800731e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007320:	4b38      	ldr	r3, [pc, #224]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007322:	2220      	movs	r2, #32
 8007324:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007326:	4b37      	ldr	r3, [pc, #220]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007328:	2200      	movs	r2, #0
 800732a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800732c:	4b35      	ldr	r3, [pc, #212]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800732e:	2204      	movs	r2, #4
 8007330:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007332:	4b34      	ldr	r3, [pc, #208]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007334:	2203      	movs	r2, #3
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007338:	4b32      	ldr	r3, [pc, #200]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800733a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007340:	4b30      	ldr	r3, [pc, #192]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007342:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007348:	482e      	ldr	r0, [pc, #184]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800734a:	f7f9 fa69 	bl	8000820 <HAL_DMA_Init>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8007354:	f7ff fe62 	bl	800701c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 800735c:	63da      	str	r2, [r3, #60]	; 0x3c
 800735e:	4a29      	ldr	r2, [pc, #164]	; (8007404 <HAL_SD_MspInit+0x1d0>)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007366:	4a2a      	ldr	r2, [pc, #168]	; (8007410 <HAL_SD_MspInit+0x1dc>)
 8007368:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800736a:	4b28      	ldr	r3, [pc, #160]	; (800740c <HAL_SD_MspInit+0x1d8>)
 800736c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007370:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007372:	4b26      	ldr	r3, [pc, #152]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <HAL_SD_MspInit+0x1d8>)
 800737a:	2200      	movs	r2, #0
 800737c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800737e:	4b23      	ldr	r3, [pc, #140]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007384:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007386:	4b21      	ldr	r3, [pc, #132]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800738c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800738e:	4b1f      	ldr	r3, [pc, #124]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007394:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007396:	4b1d      	ldr	r3, [pc, #116]	; (800740c <HAL_SD_MspInit+0x1d8>)
 8007398:	2220      	movs	r2, #32
 800739a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800739c:	4b1b      	ldr	r3, [pc, #108]	; (800740c <HAL_SD_MspInit+0x1d8>)
 800739e:	2200      	movs	r2, #0
 80073a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073a4:	2204      	movs	r2, #4
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073aa:	2203      	movs	r2, #3
 80073ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80073b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80073b6:	4b15      	ldr	r3, [pc, #84]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80073be:	4813      	ldr	r0, [pc, #76]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073c0:	f7f9 fa2e 	bl	8000820 <HAL_DMA_Init>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80073ca:	f7ff fe27 	bl	800701c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a0e      	ldr	r2, [pc, #56]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
 80073d4:	4a0d      	ldr	r2, [pc, #52]	; (800740c <HAL_SD_MspInit+0x1d8>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80073da:	2200      	movs	r2, #0
 80073dc:	2100      	movs	r1, #0
 80073de:	2031      	movs	r0, #49	; 0x31
 80073e0:	f7f9 f9e7 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80073e4:	2031      	movs	r0, #49	; 0x31
 80073e6:	f7f9 fa00 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80073ea:	bf00      	nop
 80073ec:	3728      	adds	r7, #40	; 0x28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40012c00 	.word	0x40012c00
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40020800 	.word	0x40020800
 8007400:	40020c00 	.word	0x40020c00
 8007404:	200005d0 	.word	0x200005d0
 8007408:	40026458 	.word	0x40026458
 800740c:	20000630 	.word	0x20000630
 8007410:	400264a0 	.word	0x400264a0

08007414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	607b      	str	r3, [r7, #4]
 800741e:	4a10      	ldr	r2, [pc, #64]	; (8007460 <HAL_MspInit+0x4c>)
 8007420:	4b0f      	ldr	r3, [pc, #60]	; (8007460 <HAL_MspInit+0x4c>)
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007428:	6453      	str	r3, [r2, #68]	; 0x44
 800742a:	4b0d      	ldr	r3, [pc, #52]	; (8007460 <HAL_MspInit+0x4c>)
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4a09      	ldr	r2, [pc, #36]	; (8007460 <HAL_MspInit+0x4c>)
 800743c:	4b08      	ldr	r3, [pc, #32]	; (8007460 <HAL_MspInit+0x4c>)
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6413      	str	r3, [r2, #64]	; 0x40
 8007446:	4b06      	ldr	r3, [pc, #24]	; (8007460 <HAL_MspInit+0x4c>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800

08007464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007468:	bf00      	nop
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007472:	b480      	push	{r7}
 8007474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007476:	e7fe      	b.n	8007476 <HardFault_Handler+0x4>

08007478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800747c:	e7fe      	b.n	800747c <MemManage_Handler+0x4>

0800747e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800747e:	b480      	push	{r7}
 8007480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007482:	e7fe      	b.n	8007482 <BusFault_Handler+0x4>

08007484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007488:	e7fe      	b.n	8007488 <UsageFault_Handler+0x4>

0800748a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800748a:	b480      	push	{r7}
 800748c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800748e:	bf00      	nop
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074a6:	b480      	push	{r7}
 80074a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074b8:	f7f9 f860 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074bc:	bf00      	nop
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <SDIO_IRQHandler+0x10>)
 80074c6:	f7fa fdd3 	bl	8002070 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000690 	.word	0x20000690

080074d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <DMA2_Stream3_IRQHandler+0x10>)
 80074da:	f7f9 fa71 	bl	80009c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	200005d0 	.word	0x200005d0

080074e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA2_Stream6_IRQHandler+0x10>)
 80074ee:	f7f9 fa67 	bl	80009c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000630 	.word	0x20000630

080074fc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007504:	4b11      	ldr	r3, [pc, #68]	; (800754c <_sbrk+0x50>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <_sbrk+0x16>
		heap_end = &end;
 800750c:	4b0f      	ldr	r3, [pc, #60]	; (800754c <_sbrk+0x50>)
 800750e:	4a10      	ldr	r2, [pc, #64]	; (8007550 <_sbrk+0x54>)
 8007510:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007512:	4b0e      	ldr	r3, [pc, #56]	; (800754c <_sbrk+0x50>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <_sbrk+0x50>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4413      	add	r3, r2
 8007520:	466a      	mov	r2, sp
 8007522:	4293      	cmp	r3, r2
 8007524:	d907      	bls.n	8007536 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007526:	f000 f875 	bl	8007614 <__errno>
 800752a:	4602      	mov	r2, r0
 800752c:	230c      	movs	r3, #12
 800752e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295
 8007534:	e006      	b.n	8007544 <_sbrk+0x48>
	}

	heap_end += incr;
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <_sbrk+0x50>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	4a03      	ldr	r2, [pc, #12]	; (800754c <_sbrk+0x50>)
 8007540:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200000e4 	.word	0x200000e4
 8007550:	20000718 	.word	0x20000718

08007554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007558:	4a16      	ldr	r2, [pc, #88]	; (80075b4 <SystemInit+0x60>)
 800755a:	4b16      	ldr	r3, [pc, #88]	; (80075b4 <SystemInit+0x60>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007568:	4a13      	ldr	r2, [pc, #76]	; (80075b8 <SystemInit+0x64>)
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <SystemInit+0x64>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007574:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <SystemInit+0x64>)
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800757a:	4a0f      	ldr	r2, [pc, #60]	; (80075b8 <SystemInit+0x64>)
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <SystemInit+0x64>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007588:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800758a:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <SystemInit+0x64>)
 800758c:	4a0b      	ldr	r2, [pc, #44]	; (80075bc <SystemInit+0x68>)
 800758e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007590:	4a09      	ldr	r2, [pc, #36]	; (80075b8 <SystemInit+0x64>)
 8007592:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <SystemInit+0x64>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800759a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <SystemInit+0x64>)
 800759e:	2200      	movs	r2, #0
 80075a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <SystemInit+0x60>)
 80075a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075a8:	609a      	str	r2, [r3, #8]
#endif
}
 80075aa:	bf00      	nop
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	e000ed00 	.word	0xe000ed00
 80075b8:	40023800 	.word	0x40023800
 80075bc:	24003010 	.word	0x24003010

080075c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80075c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075c6:	e003      	b.n	80075d0 <LoopCopyDataInit>

080075c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075ce:	3104      	adds	r1, #4

080075d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075d0:	480b      	ldr	r0, [pc, #44]	; (8007600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075d8:	d3f6      	bcc.n	80075c8 <CopyDataInit>
  ldr  r2, =_sbss
 80075da:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075dc:	e002      	b.n	80075e4 <LoopFillZerobss>

080075de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075e0:	f842 3b04 	str.w	r3, [r2], #4

080075e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075e8:	d3f9      	bcc.n	80075de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80075ea:	f7ff ffb3 	bl	8007554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075ee:	f000 f817 	bl	8007620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075f2:	f7ff fc39 	bl	8006e68 <main>
  bx  lr    
 80075f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80075f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80075fc:	08032484 	.word	0x08032484
  ldr  r0, =_sdata
 8007600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007604:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8007608:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800760c:	20000718 	.word	0x20000718

08007610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007610:	e7fe      	b.n	8007610 <ADC_IRQHandler>
	...

08007614 <__errno>:
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <__errno+0x8>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000030 	.word	0x20000030

08007620 <__libc_init_array>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0d      	ldr	r6, [pc, #52]	; (8007658 <__libc_init_array+0x38>)
 8007624:	4c0d      	ldr	r4, [pc, #52]	; (800765c <__libc_init_array+0x3c>)
 8007626:	1ba4      	subs	r4, r4, r6
 8007628:	10a4      	asrs	r4, r4, #2
 800762a:	2500      	movs	r5, #0
 800762c:	42a5      	cmp	r5, r4
 800762e:	d109      	bne.n	8007644 <__libc_init_array+0x24>
 8007630:	4e0b      	ldr	r6, [pc, #44]	; (8007660 <__libc_init_array+0x40>)
 8007632:	4c0c      	ldr	r4, [pc, #48]	; (8007664 <__libc_init_array+0x44>)
 8007634:	f000 f8ee 	bl	8007814 <_init>
 8007638:	1ba4      	subs	r4, r4, r6
 800763a:	10a4      	asrs	r4, r4, #2
 800763c:	2500      	movs	r5, #0
 800763e:	42a5      	cmp	r5, r4
 8007640:	d105      	bne.n	800764e <__libc_init_array+0x2e>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007648:	4798      	blx	r3
 800764a:	3501      	adds	r5, #1
 800764c:	e7ee      	b.n	800762c <__libc_init_array+0xc>
 800764e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007652:	4798      	blx	r3
 8007654:	3501      	adds	r5, #1
 8007656:	e7f2      	b.n	800763e <__libc_init_array+0x1e>
 8007658:	0803247c 	.word	0x0803247c
 800765c:	0803247c 	.word	0x0803247c
 8007660:	0803247c 	.word	0x0803247c
 8007664:	08032480 	.word	0x08032480

08007668 <malloc>:
 8007668:	4b02      	ldr	r3, [pc, #8]	; (8007674 <malloc+0xc>)
 800766a:	4601      	mov	r1, r0
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	f000 b861 	b.w	8007734 <_malloc_r>
 8007672:	bf00      	nop
 8007674:	20000030 	.word	0x20000030

08007678 <free>:
 8007678:	4b02      	ldr	r3, [pc, #8]	; (8007684 <free+0xc>)
 800767a:	4601      	mov	r1, r0
 800767c:	6818      	ldr	r0, [r3, #0]
 800767e:	f000 b80b 	b.w	8007698 <_free_r>
 8007682:	bf00      	nop
 8007684:	20000030 	.word	0x20000030

08007688 <memset>:
 8007688:	4402      	add	r2, r0
 800768a:	4603      	mov	r3, r0
 800768c:	4293      	cmp	r3, r2
 800768e:	d100      	bne.n	8007692 <memset+0xa>
 8007690:	4770      	bx	lr
 8007692:	f803 1b01 	strb.w	r1, [r3], #1
 8007696:	e7f9      	b.n	800768c <memset+0x4>

08007698 <_free_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4605      	mov	r5, r0
 800769c:	2900      	cmp	r1, #0
 800769e:	d045      	beq.n	800772c <_free_r+0x94>
 80076a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076a4:	1f0c      	subs	r4, r1, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfb8      	it	lt
 80076aa:	18e4      	addlt	r4, r4, r3
 80076ac:	f000 f8b0 	bl	8007810 <__malloc_lock>
 80076b0:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <_free_r+0x98>)
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	4610      	mov	r0, r2
 80076b6:	b933      	cbnz	r3, 80076c6 <_free_r+0x2e>
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6014      	str	r4, [r2, #0]
 80076bc:	4628      	mov	r0, r5
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f000 b8a6 	b.w	8007812 <__malloc_unlock>
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d90c      	bls.n	80076e4 <_free_r+0x4c>
 80076ca:	6821      	ldr	r1, [r4, #0]
 80076cc:	1862      	adds	r2, r4, r1
 80076ce:	4293      	cmp	r3, r2
 80076d0:	bf04      	itt	eq
 80076d2:	681a      	ldreq	r2, [r3, #0]
 80076d4:	685b      	ldreq	r3, [r3, #4]
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	bf04      	itt	eq
 80076da:	1852      	addeq	r2, r2, r1
 80076dc:	6022      	streq	r2, [r4, #0]
 80076de:	6004      	str	r4, [r0, #0]
 80076e0:	e7ec      	b.n	80076bc <_free_r+0x24>
 80076e2:	4613      	mov	r3, r2
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	b10a      	cbz	r2, 80076ec <_free_r+0x54>
 80076e8:	42a2      	cmp	r2, r4
 80076ea:	d9fa      	bls.n	80076e2 <_free_r+0x4a>
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	1858      	adds	r0, r3, r1
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	d10b      	bne.n	800770c <_free_r+0x74>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	4401      	add	r1, r0
 80076f8:	1858      	adds	r0, r3, r1
 80076fa:	4282      	cmp	r2, r0
 80076fc:	6019      	str	r1, [r3, #0]
 80076fe:	d1dd      	bne.n	80076bc <_free_r+0x24>
 8007700:	6810      	ldr	r0, [r2, #0]
 8007702:	6852      	ldr	r2, [r2, #4]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	4401      	add	r1, r0
 8007708:	6019      	str	r1, [r3, #0]
 800770a:	e7d7      	b.n	80076bc <_free_r+0x24>
 800770c:	d902      	bls.n	8007714 <_free_r+0x7c>
 800770e:	230c      	movs	r3, #12
 8007710:	602b      	str	r3, [r5, #0]
 8007712:	e7d3      	b.n	80076bc <_free_r+0x24>
 8007714:	6820      	ldr	r0, [r4, #0]
 8007716:	1821      	adds	r1, r4, r0
 8007718:	428a      	cmp	r2, r1
 800771a:	bf04      	itt	eq
 800771c:	6811      	ldreq	r1, [r2, #0]
 800771e:	6852      	ldreq	r2, [r2, #4]
 8007720:	6062      	str	r2, [r4, #4]
 8007722:	bf04      	itt	eq
 8007724:	1809      	addeq	r1, r1, r0
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	605c      	str	r4, [r3, #4]
 800772a:	e7c7      	b.n	80076bc <_free_r+0x24>
 800772c:	bd38      	pop	{r3, r4, r5, pc}
 800772e:	bf00      	nop
 8007730:	200000e8 	.word	0x200000e8

08007734 <_malloc_r>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	1ccd      	adds	r5, r1, #3
 8007738:	f025 0503 	bic.w	r5, r5, #3
 800773c:	3508      	adds	r5, #8
 800773e:	2d0c      	cmp	r5, #12
 8007740:	bf38      	it	cc
 8007742:	250c      	movcc	r5, #12
 8007744:	2d00      	cmp	r5, #0
 8007746:	4606      	mov	r6, r0
 8007748:	db01      	blt.n	800774e <_malloc_r+0x1a>
 800774a:	42a9      	cmp	r1, r5
 800774c:	d903      	bls.n	8007756 <_malloc_r+0x22>
 800774e:	230c      	movs	r3, #12
 8007750:	6033      	str	r3, [r6, #0]
 8007752:	2000      	movs	r0, #0
 8007754:	bd70      	pop	{r4, r5, r6, pc}
 8007756:	f000 f85b 	bl	8007810 <__malloc_lock>
 800775a:	4a23      	ldr	r2, [pc, #140]	; (80077e8 <_malloc_r+0xb4>)
 800775c:	6814      	ldr	r4, [r2, #0]
 800775e:	4621      	mov	r1, r4
 8007760:	b991      	cbnz	r1, 8007788 <_malloc_r+0x54>
 8007762:	4c22      	ldr	r4, [pc, #136]	; (80077ec <_malloc_r+0xb8>)
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	b91b      	cbnz	r3, 8007770 <_malloc_r+0x3c>
 8007768:	4630      	mov	r0, r6
 800776a:	f000 f841 	bl	80077f0 <_sbrk_r>
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	4629      	mov	r1, r5
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f83c 	bl	80077f0 <_sbrk_r>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d126      	bne.n	80077ca <_malloc_r+0x96>
 800777c:	230c      	movs	r3, #12
 800777e:	6033      	str	r3, [r6, #0]
 8007780:	4630      	mov	r0, r6
 8007782:	f000 f846 	bl	8007812 <__malloc_unlock>
 8007786:	e7e4      	b.n	8007752 <_malloc_r+0x1e>
 8007788:	680b      	ldr	r3, [r1, #0]
 800778a:	1b5b      	subs	r3, r3, r5
 800778c:	d41a      	bmi.n	80077c4 <_malloc_r+0x90>
 800778e:	2b0b      	cmp	r3, #11
 8007790:	d90f      	bls.n	80077b2 <_malloc_r+0x7e>
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	50cd      	str	r5, [r1, r3]
 8007796:	18cc      	adds	r4, r1, r3
 8007798:	4630      	mov	r0, r6
 800779a:	f000 f83a 	bl	8007812 <__malloc_unlock>
 800779e:	f104 000b 	add.w	r0, r4, #11
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	f020 0007 	bic.w	r0, r0, #7
 80077a8:	1ac3      	subs	r3, r0, r3
 80077aa:	d01b      	beq.n	80077e4 <_malloc_r+0xb0>
 80077ac:	425a      	negs	r2, r3
 80077ae:	50e2      	str	r2, [r4, r3]
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	428c      	cmp	r4, r1
 80077b4:	bf0d      	iteet	eq
 80077b6:	6863      	ldreq	r3, [r4, #4]
 80077b8:	684b      	ldrne	r3, [r1, #4]
 80077ba:	6063      	strne	r3, [r4, #4]
 80077bc:	6013      	streq	r3, [r2, #0]
 80077be:	bf18      	it	ne
 80077c0:	460c      	movne	r4, r1
 80077c2:	e7e9      	b.n	8007798 <_malloc_r+0x64>
 80077c4:	460c      	mov	r4, r1
 80077c6:	6849      	ldr	r1, [r1, #4]
 80077c8:	e7ca      	b.n	8007760 <_malloc_r+0x2c>
 80077ca:	1cc4      	adds	r4, r0, #3
 80077cc:	f024 0403 	bic.w	r4, r4, #3
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d005      	beq.n	80077e0 <_malloc_r+0xac>
 80077d4:	1a21      	subs	r1, r4, r0
 80077d6:	4630      	mov	r0, r6
 80077d8:	f000 f80a 	bl	80077f0 <_sbrk_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	d0cd      	beq.n	800777c <_malloc_r+0x48>
 80077e0:	6025      	str	r5, [r4, #0]
 80077e2:	e7d9      	b.n	8007798 <_malloc_r+0x64>
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	bf00      	nop
 80077e8:	200000e8 	.word	0x200000e8
 80077ec:	200000ec 	.word	0x200000ec

080077f0 <_sbrk_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4c06      	ldr	r4, [pc, #24]	; (800780c <_sbrk_r+0x1c>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4605      	mov	r5, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	f7ff fe7e 	bl	80074fc <_sbrk>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_sbrk_r+0x1a>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	b103      	cbz	r3, 800780a <_sbrk_r+0x1a>
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000714 	.word	0x20000714

08007810 <__malloc_lock>:
 8007810:	4770      	bx	lr

08007812 <__malloc_unlock>:
 8007812:	4770      	bx	lr

08007814 <_init>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr

08007820 <_fini>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr
